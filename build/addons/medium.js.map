{"version":3,"sources":["addons/medium.js","webpack:///webpack/bootstrap f6188d4bf81bf977ae00?1ce7**","./addons/medium/index.js","webpack:///external \"react\"?3c62**","./addons/medium/editor.js","./addons/medium/previewer.js","./addons/medium/vendor/medium-editor.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","Editor","Previewer","React","Medium","defaultContent","html","text","renderEditor","createElement","onBlur","this","setContent","state","content","renderPreviewer",1,"require",32,"MediumEditor","Types","PropTypes","createClass","displayName","propTypes","string","isRequired","func","getDefaultProps","options","buttons","firstHeader","secondHeader","diffLeft","diffTop","disableDoubleReturn","shouldComponentUpdate","componentDidMount","setState","editor","refs","getDOMNode","props","componentWillUnmount","deactivate","render","className","_onBlur","role","aria-multiline","ref","dangerouslySetInnerHTML","__html","textContent","innerHTML",33,34,"document","view","classListProp","protoProp","elemCtrProto","Element","objCtr","strTrim","String","trim","replace","arrIndexOf","Array","indexOf","item","len","DOMEx","type","message","name","code","DOMException","checkTokenAndGetIndex","classList","token","test","ClassList","elem","trimmedClasses","getAttribute","classes","split","push","_updateClassName","setAttribute","toString","classListProto","classListGetter","Error","contains","add","tokens","l","updated","remove","index","splice","toggle","force","result","method","join","defineProperty","classListPropDesc","get","enumerable","configurable","ex","number","__defineGetter__","self","root","factory","undefined","elements","init","Util","window","copyInto","dest","overwrite","prop","isIE","navigator","appName","RegExp","exec","userAgent","keyCode","BACKSPACE","TAB","ENTER","ESCAPE","SPACE","DELETE","parentElements","defaults","extend","derives","base","derived","Proto","origPrototype","constructor","findAdjacentTextNodeWithContent","rootNode","targetNode","ownerDocument","nextNode","pastTarget","nodeIterator","createNodeIterator","NodeFilter","SHOW_TEXT","nodeType","nodeValue","isDescendant","parent","child","node","parentNode","isElement","obj","now","Date","getTime","throttle","wait","context","args","later","THROTTLE_INTERVAL","timeout","previous","apply","currNow","remaining","clearTimeout","setTimeout","traverseUp","current","testElementFunction","htmlEntities","str","insertHTMLCommand","doc","selection","range","el","fragment","lastNode","queryCommandSupported","execCommand","ignore","getSelection","getRangeAt","rangeCount","deleteContents","createDocumentFragment","firstChild","appendChild","insertNode","cloneRange","setStartAfter","collapse","removeAllRanges","addRange","setTargetBlank","tagName","toLowerCase","getElementsByTagName","isListItemChild","Selection","getSelectionStart","anchorNode","startNode","findMatchingSelectionParent","contentWindow","commonAncestorContainer","getSelectionElement","selectionInContentEditableFalse","nodeName","getSelectionHtml","sel","container","cloneContents","createRange","htmlText","getCaretOffsets","element","preCaretRange","postCaretRange","selectNodeContents","setEnd","endContainer","endOffset","setStart","left","right","rangeSelectsSingleNode","startContainer","hasChildNodes","startOffset","getSelectedParentElement","selectedParentElement","childNodes","getSelectionData","DefaultButton","ButtonsData","bold","action","aria","tagNames","style","value","useQueryState","contentDefault","contentFA","italic","underline","strikethrough","superscript","subscript","image","quote","orderedlist","unorderedlist","pre","indent","outdent","justifyCenter","justifyFull","justifyLeft","justifyRight","header1","header2","instance","button","createButton","on","handleClick","bind","getButton","getAction","getAria","getTagNames","buttonLabels","evt","preventDefault","stopPropagation","execAction","isActive","activeButtonClass","setInactive","knownState","setActive","queryCommandState","queryState","isAlreadyApplied","styleVals","computedStyle","isMatch","getComputedStyle","getPropertyValue","forEach","val","pasteHandler","createReplacements","handlePaste","paragraphs","dataFormatHTML","dataFormatPlain","forcePlainText","cleanPastedHTML","clipboardData","getData","defaultPrevented","cleanPaste","disableReturn","elList","workEl","multiline","replacements","pasteHTML","querySelectorAll","targetBlank","filterCommonBlocks","filterLineBreak","fragmentBody","pasteBlock","querySelector","cleanupSpans","removeAttribute","removeChild","isCommonBlock","previousElementSibling","lastChild","childElementCount","removeWithParent","container_el","new_el","spans","isCEF","replaceChild","createTextNode","AnchorExtension","AnchorDerived","hasForm","checkSelection","selectionRange","isDisplayed","showForm","getForm","anchorForm","createForm","display","hideForm","getInput","link_value","input","saveSelection","hideToolbarDefaultActions","setToolbarPosition","keepToolbarAlive","focus","doLinkCreation","targetCheckbox","buttonCheckbox","opts","url","restoreSelection","checkLinkFormat","checked","buttonClass","anchorButtonClass","createLink","re","doFormCancel","target_label","button_label","form","close","save","handleFormClick","anchorInputPlaceholder","handleTextboxKeyup","handleSaveClick","handleCloseClick","anchorTarget","anchorInputCheckboxLabel","insertBefore","anchorButton","body","handleOutsideInteraction","event","toolbarActions","statics","allowMultiParagraphSelection","anchorPreviewHideDelay","delay","disableToolbar","disableEditing","disablePlaceholders","toolbarAlign","elementsContainer","imageDragging","standardizeSelectionStart","placeholder","extensions","firstButtonClass","lastButtonClass","uniqueId","setElementSelection","setup","events","initThrottledMethods","initCommands","initElements","bindSelect","bindDragDrop","bindPaste","setPlaceholders","bindElementActions","bindWindowActions","listener","useCapture","addEventListener","off","e","indexOfListener","removeEventListener","n","fn","removeAllEvents","pop","handleResize","positionToolbarIfShown","handleBlur","hideToolbarActions","addToolbar","bindParagraphCreation","initToolbar","setFirstAndLastButtons","bindAnchorPreview","selector","slice","bindBlur","blurFunction","isDescendantOfEditorElements","selRange","isCollapsed","toolbar","anchorPreview","placeholderWrapper","bindClick","staticToolbar","activatePlaceholder","bindReturn","bindKeydown","serialize","elementid","initExtension","extension","ext","commands","buttonName","getExtensionByName","callExtensions","funcName","which","editorElement","children","shiftKey","tag","onBlockModifier","ctrlKey","metaKey","fromCharCode","isEmpty","isHeader","nextElementSibling","createToolbar","createAnchorPreview","toolbarButtons","li","btn","ul","blurHelper","relatedTarget","timeoutHelper","documentElement","onDrag","onDrop","dataTransfer","dropEffect","files","some","file","match","fileReader","FileReader","readAsDataURL","onload","img","getElementById","src","stopSelectionUpdates","preventSelectionUpdates","startSelectionUpdates","newSelection","selectionElement","updateOnEmptySelection","multipleBlockElementsSelected","showAndUpdateToolbar","checkSelectionElement","selectionHtml","hasMultiParagraphs","adjacentNode","newRange","offset","substr","setToolbarButtonStates","showToolbarDefaultActions","toolbarWidth","toolbarHeight","halfOffsetWidth","defaultLeft","containerRect","containerTop","containerCenter","boundary","middleBoundary","targetLeft","scrollTop","windowWidth","innerWidth","buttonHeight","focusNode","getBoundingClientRect","top","width","offsetWidth","offsetHeight","showToolbar","stickyToolbar","bottom","pageYOffset","hideAnchorPreview","checkActiveButtons","manualStateChecks","checkExtension","checkState","command","fullAction","exc","selectAllContents","execActionInternal","appendAction","execFormatBlock","selectionData","isToolbarDefaultActionsShown","onHide","hideExtensionForms","isToolbarShown","onShowToolbar","hideToolbar","onHideToolbar","currNode","selectionState","preSelectionRange","start","editableElementIndex","end","nextCharIndex","editableElement","charIndex","nodeStack","foundStart","stop","showAnchorPreview","anchorEl","attributes","href","observeAnchorPreview","Math","round","lastOver","over","stamp","unstamp","interval_timer","setInterval","durr","clearInterval","anchorPreviewTemplate","anchorPreviewClickHandler","anchorExtension","activeAnchor","editorAnchorObserver","overAnchor","leaveAnchor","outerHTML","editorAnchorObserverWrapper","customEvent","setButtonClass","createEvent","initEvent","dispatchEvent","j","activate","pasteWrapper",60],"mappings":"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","file":"addons/medium.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\t/**\n\t * This component adds a medium.com-like rich text editor block type.\n\t *\n\t * Source for this component can be found here:\n\t * https://github.com/daviferreira/medium-editor\n\t */\n\t\n\tvar Editor = __webpack_require__(32);\n\tvar Previewer = __webpack_require__(33);\n\tvar React = __webpack_require__(1);\n\t\n\t__webpack_require__(60);\n\t\n\tvar Medium = {\n\t\n\t  defaultContent: function defaultContent() {\n\t    return { html: \"\", text: \"\" };\n\t  },\n\t\n\t  renderEditor: function renderEditor() {\n\t    return React.createElement(Editor, _extends({ onBlur: this.setContent }, this.state.content));\n\t  },\n\t\n\t  renderPreviewer: function renderPreviewer() {\n\t    return React.createElement(Previewer, this.state.content);\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = Medium;\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = require(\"react\");\n\n/***/ },\n\n/***/ 32:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar MediumEditor = __webpack_require__(34);\n\tvar React = __webpack_require__(1);\n\tvar Types = React.PropTypes;\n\t\n\tvar Editor = React.createClass({\n\t  displayName: \"Editor\",\n\t\n\t\n\t  propTypes: {\n\t    html: Types.string.isRequired,\n\t    onBlur: Types.func.isRequired\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      options: {\n\t        buttons: [\"header1\", \"header2\", \"bold\", \"italic\", \"underline\", \"anchor\", \"quote\", \"unorderedlist\", \"orderedlist\"],\n\t        firstHeader: \"h1\",\n\t        secondHeader: \"h2\",\n\t        diffLeft: 0,\n\t        diffTop: -10,\n\t        disableDoubleReturn: true\n\t      }\n\t    };\n\t  },\n\t\n\t  shouldComponentUpdate: function shouldComponentUpdate(props, state) {\n\t    return false;\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    this.setState({\n\t      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n\t    });\n\t  },\n\t\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    this.state.editor.deactivate();\n\t  },\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"col-block-medium\" },\n\t      React.createElement(\"div\", { className: \"col-medium\", onBlur: this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html } })\n\t    );\n\t  },\n\t\n\t  _onBlur: function _onBlur() {\n\t    var editor = this.refs.editor.getDOMNode();\n\t\n\t    this.props.onBlur({\n\t      text: editor.textContent,\n\t      html: editor.innerHTML\n\t    });\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Editor;\n\n/***/ },\n\n/***/ 33:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar React = __webpack_require__(1);\n\t\n\tvar Previewer = React.createClass({\n\t  displayName: \"Previewer\",\n\t\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"col-block-content\" },\n\t      React.createElement(\"div\", { className: \"col-medium-preview\", dangerouslySetInnerHTML: { __html: this.props.html } })\n\t    );\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = Previewer;\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t/*global self, document, DOMException */\n\t\n\t/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\t\n\t// Full polyfill for browsers with no classList support\n\tif (!(\"classList\" in document.createElement(\"_\"))) {\n\t    (function (view) {\n\t        \"use strict\";\n\t\n\t        if (!(\"Element\" in view)) return;\n\t\n\t        var classListProp = \"classList\",\n\t            protoProp = \"prototype\",\n\t            elemCtrProto = view.Element[protoProp],\n\t            objCtr = Object,\n\t            strTrim = String[protoProp].trim || function () {\n\t            return this.replace(/^\\s+|\\s+$/g, \"\");\n\t        },\n\t            arrIndexOf = Array[protoProp].indexOf || function (item) {\n\t            var i = 0,\n\t                len = this.length;\n\t            for (; i < len; i++) {\n\t                if (i in this && this[i] === item) {\n\t                    return i;\n\t                }\n\t            }\n\t            return -1;\n\t        }\n\t        // Vendors: please allow content code to instantiate DOMExceptions\n\t        ,\n\t            DOMEx = function (type, message) {\n\t            this.name = type;\n\t            this.code = DOMException[type];\n\t            this.message = message;\n\t        },\n\t            checkTokenAndGetIndex = function (classList, token) {\n\t            if (token === \"\") {\n\t                throw new DOMEx(\"SYNTAX_ERR\", \"An invalid or illegal string was specified\");\n\t            }\n\t            if (/\\s/.test(token)) {\n\t                throw new DOMEx(\"INVALID_CHARACTER_ERR\", \"String contains an invalid character\");\n\t            }\n\t            return arrIndexOf.call(classList, token);\n\t        },\n\t            ClassList = function (elem) {\n\t            var trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\"),\n\t                classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n\t                i = 0,\n\t                len = classes.length;\n\t            for (; i < len; i++) {\n\t                this.push(classes[i]);\n\t            }\n\t            this._updateClassName = function () {\n\t                elem.setAttribute(\"class\", this.toString());\n\t            };\n\t        },\n\t            classListProto = ClassList[protoProp] = [],\n\t            classListGetter = function () {\n\t            return new ClassList(this);\n\t        };\n\t        // Most DOMException implementations don't allow calling DOMException's toString()\n\t        // on non-DOMExceptions. Error's toString() is sufficient here.\n\t        DOMEx[protoProp] = Error[protoProp];\n\t        classListProto.item = function (i) {\n\t            return this[i] || null;\n\t        };\n\t        classListProto.contains = function (token) {\n\t            token += \"\";\n\t            return checkTokenAndGetIndex(this, token) !== -1;\n\t        };\n\t        classListProto.add = function () {\n\t            var tokens = arguments,\n\t                i = 0,\n\t                l = tokens.length,\n\t                token,\n\t                updated = false;\n\t            do {\n\t                token = tokens[i] + \"\";\n\t                if (checkTokenAndGetIndex(this, token) === -1) {\n\t                    this.push(token);\n\t                    updated = true;\n\t                }\n\t            } while (++i < l);\n\t\n\t            if (updated) {\n\t                this._updateClassName();\n\t            }\n\t        };\n\t        classListProto.remove = function () {\n\t            var tokens = arguments,\n\t                i = 0,\n\t                l = tokens.length,\n\t                token,\n\t                updated = false,\n\t                index;\n\t            do {\n\t                token = tokens[i] + \"\";\n\t                index = checkTokenAndGetIndex(this, token);\n\t                while (index !== -1) {\n\t                    this.splice(index, 1);\n\t                    updated = true;\n\t                    index = checkTokenAndGetIndex(this, token);\n\t                }\n\t            } while (++i < l);\n\t\n\t            if (updated) {\n\t                this._updateClassName();\n\t            }\n\t        };\n\t        classListProto.toggle = function (token, force) {\n\t            token += \"\";\n\t\n\t            var result = this.contains(token),\n\t                method = result ? force !== true && \"remove\" : force !== false && \"add\";\n\t\n\t            if (method) {\n\t                this[method](token);\n\t            }\n\t\n\t            if (force === true || force === false) {\n\t                return force;\n\t            } else {\n\t                return !result;\n\t            }\n\t        };\n\t        classListProto.toString = function () {\n\t            return this.join(\" \");\n\t        };\n\t\n\t        if (objCtr.defineProperty) {\n\t            var classListPropDesc = {\n\t                get: classListGetter,\n\t                enumerable: true,\n\t                configurable: true\n\t            };\n\t            try {\n\t                objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t            } catch (ex) {\n\t                // IE 8 doesn't support enumerable:true\n\t                if (ex.number === -2146823252) {\n\t                    classListPropDesc.enumerable = false;\n\t                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t                }\n\t            }\n\t        } else if (objCtr[protoProp].__defineGetter__) {\n\t            elemCtrProto.__defineGetter__(classListProp, classListGetter);\n\t        }\n\t    })(self);\n\t}\n\t\n\t(function (root, factory) {\n\t    \"use strict\";\n\t    if (true) {\n\t        module.exports = factory;\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(function () {\n\t            return factory;\n\t        });\n\t    } else {\n\t        root.MediumEditor = factory;\n\t    }\n\t})(undefined, (function () {\n\t    \"use strict\";\n\t\n\t    var Util;\n\t\n\t    (function (window, document) {\n\t        \"use strict\";\n\t\n\t        function copyInto(dest, source, overwrite) {\n\t            var prop;\n\t            dest = dest || {};\n\t            for (prop in source) {\n\t                if (source.hasOwnProperty(prop) && (overwrite || dest.hasOwnProperty(prop) === false)) {\n\t                    dest[prop] = source[prop];\n\t                }\n\t            }\n\t            return dest;\n\t        }\n\t\n\t        Util = {\n\t\n\t            // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n\t            // by rg89\n\t            isIE: navigator.appName === \"Microsoft Internet Explorer\" || navigator.appName === \"Netscape\" && new RegExp(\"Trident/.*rv:([0-9]{1,}[.0-9]{0,})\").exec(navigator.userAgent) !== null,\n\t\n\t            // https://github.com/jashkenas/underscore\n\t            keyCode: {\n\t                BACKSPACE: 8,\n\t                TAB: 9,\n\t                ENTER: 13,\n\t                ESCAPE: 27,\n\t                SPACE: 32,\n\t                DELETE: 46\n\t            },\n\t\n\t            parentElements: [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\"],\n\t\n\t            defaults: function defaults(dest, source) {\n\t                return copyInto(dest, source);\n\t            },\n\t\n\t            extend: function extend(dest, source) {\n\t                return copyInto(dest, source, true);\n\t            },\n\t\n\t            derives: function derives(base, derived) {\n\t                var origPrototype = derived.prototype;\n\t                function Proto() {}\n\t                Proto.prototype = base.prototype;\n\t                derived.prototype = new Proto();\n\t                derived.prototype.constructor = base;\n\t                derived.prototype = copyInto(derived.prototype, origPrototype);\n\t                return derived;\n\t            },\n\t\n\t            // Find the next node in the DOM tree that represents any text that is being\n\t            // displayed directly next to the targetNode (passed as an argument)\n\t            // Text that appears directly next to the current node can be:\n\t            //  - A sibling text node\n\t            //  - A descendant of a sibling element\n\t            //  - A sibling text node of an ancestor\n\t            //  - A descendant of a sibling element of an ancestor\n\t            findAdjacentTextNodeWithContent: function findAdjacentTextNodeWithContent(rootNode, targetNode, ownerDocument) {\n\t                var pastTarget = false,\n\t                    nextNode,\n\t                    nodeIterator = ownerDocument.createNodeIterator(rootNode, NodeFilter.SHOW_TEXT, null, false);\n\t\n\t                // Use a native NodeIterator to iterate over all the text nodes that are descendants\n\t                // of the rootNode.  Once past the targetNode, choose the first non-empty text node\n\t                nextNode = nodeIterator.nextNode();\n\t                while (nextNode) {\n\t                    if (nextNode === targetNode) {\n\t                        pastTarget = true;\n\t                    } else if (pastTarget) {\n\t                        if (nextNode.nodeType === 3 && nextNode.nodeValue && nextNode.nodeValue.trim().length > 0) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    nextNode = nodeIterator.nextNode();\n\t                }\n\t\n\t                return nextNode;\n\t            },\n\t\n\t            isDescendant: function isDescendant(parent, child) {\n\t                if (!parent || !child) {\n\t                    return false;\n\t                }\n\t                var node = child.parentNode;\n\t                while (node !== null) {\n\t                    if (node === parent) {\n\t                        return true;\n\t                    }\n\t                    node = node.parentNode;\n\t                }\n\t                return false;\n\t            },\n\t\n\t            // https://github.com/jashkenas/underscore\n\t            isElement: function isElement(obj) {\n\t                return !!(obj && obj.nodeType === 1);\n\t            },\n\t\n\t            now: function now() {\n\t                return Date.now || new Date().getTime();\n\t            },\n\t\n\t            // https://github.com/jashkenas/underscore\n\t            throttle: function throttle(func, wait) {\n\t                var THROTTLE_INTERVAL = 50,\n\t                    context,\n\t                    args,\n\t                    result,\n\t                    timeout = null,\n\t                    previous = 0,\n\t                    later;\n\t\n\t                if (!wait && wait !== 0) {\n\t                    wait = THROTTLE_INTERVAL;\n\t                }\n\t\n\t                later = function () {\n\t                    previous = Util.now();\n\t                    timeout = null;\n\t                    result = func.apply(context, args);\n\t                    if (!timeout) {\n\t                        context = args = null;\n\t                    }\n\t                };\n\t\n\t                return function () {\n\t                    var currNow = Util.now(),\n\t                        remaining = wait - (currNow - previous);\n\t                    context = this;\n\t                    args = arguments;\n\t                    if (remaining <= 0 || remaining > wait) {\n\t                        clearTimeout(timeout);\n\t                        timeout = null;\n\t                        previous = currNow;\n\t                        result = func.apply(context, args);\n\t                        if (!timeout) {\n\t                            context = args = null;\n\t                        }\n\t                    } else if (!timeout) {\n\t                        timeout = setTimeout(later, remaining);\n\t                    }\n\t                    return result;\n\t                };\n\t            },\n\t\n\t            traverseUp: function (current, testElementFunction) {\n\t                do {\n\t                    if (current.nodeType === 1) {\n\t                        if (testElementFunction(current)) {\n\t                            return current;\n\t                        }\n\t                        // do not traverse upwards past the nearest containing editor\n\t                        if (current.getAttribute(\"data-medium-element\")) {\n\t                            return false;\n\t                        }\n\t                    }\n\t\n\t                    current = current.parentNode;\n\t                } while (current);\n\t\n\t                return false;\n\t            },\n\t\n\t            htmlEntities: function (str) {\n\t                // converts special characters (like <) into their escaped/encoded values (like &lt;).\n\t                // This allows you to show to display the string without the browser reading it as HTML.\n\t                return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n\t            },\n\t\n\t            // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div\n\t            insertHTMLCommand: function (doc, html) {\n\t                var selection, range, el, fragment, node, lastNode;\n\t\n\t                if (doc.queryCommandSupported(\"insertHTML\")) {\n\t                    try {\n\t                        return doc.execCommand(\"insertHTML\", false, html);\n\t                    } catch (ignore) {}\n\t                }\n\t\n\t                selection = window.getSelection();\n\t                if (selection.getRangeAt && selection.rangeCount) {\n\t                    range = selection.getRangeAt(0);\n\t                    range.deleteContents();\n\t\n\t                    el = doc.createElement(\"div\");\n\t                    el.innerHTML = html;\n\t                    fragment = doc.createDocumentFragment();\n\t                    while (el.firstChild) {\n\t                        node = el.firstChild;\n\t                        lastNode = fragment.appendChild(node);\n\t                    }\n\t                    range.insertNode(fragment);\n\t\n\t                    // Preserve the selection:\n\t                    if (lastNode) {\n\t                        range = range.cloneRange();\n\t                        range.setStartAfter(lastNode);\n\t                        range.collapse(true);\n\t                        selection.removeAllRanges();\n\t                        selection.addRange(range);\n\t                    }\n\t                }\n\t            },\n\t\n\t            // TODO: not sure if this should be here\n\t            setTargetBlank: function (el) {\n\t                var i;\n\t                if (el.tagName.toLowerCase() === \"a\") {\n\t                    el.target = \"_blank\";\n\t                } else {\n\t                    el = el.getElementsByTagName(\"a\");\n\t\n\t                    for (i = 0; i < el.length; i += 1) {\n\t                        el[i].target = \"_blank\";\n\t                    }\n\t                }\n\t            },\n\t\n\t            isListItemChild: function (node) {\n\t                var parentNode = node.parentNode,\n\t                    tagName = parentNode.tagName.toLowerCase();\n\t                while (this.parentElements.indexOf(tagName) === -1 && tagName !== \"div\") {\n\t                    if (tagName === \"li\") {\n\t                        return true;\n\t                    }\n\t                    parentNode = parentNode.parentNode;\n\t                    if (parentNode && parentNode.tagName) {\n\t                        tagName = parentNode.tagName.toLowerCase();\n\t                    } else {\n\t                        return false;\n\t                    }\n\t                }\n\t                return false;\n\t            }\n\t        };\n\t    })(window, document);\n\t\n\t    var Selection;\n\t\n\t    (function (window, document) {\n\t        \"use strict\";\n\t\n\t        Selection = {\n\t            // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n\t            // by You\n\t            getSelectionStart: function (ownerDocument) {\n\t                var node = ownerDocument.getSelection().anchorNode,\n\t                    startNode = node && node.nodeType === 3 ? node.parentNode : node;\n\t                return startNode;\n\t            },\n\t\n\t            findMatchingSelectionParent: function (testElementFunction, contentWindow) {\n\t                var selection = contentWindow.getSelection(),\n\t                    range,\n\t                    current;\n\t\n\t                if (selection.rangeCount === 0) {\n\t                    return false;\n\t                }\n\t\n\t                range = selection.getRangeAt(0);\n\t                current = range.commonAncestorContainer;\n\t\n\t                return Util.traverseUp(current, testElementFunction);\n\t            },\n\t\n\t            getSelectionElement: function (contentWindow) {\n\t                return this.findMatchingSelectionParent(function (el) {\n\t                    return el.getAttribute(\"data-medium-element\");\n\t                }, contentWindow);\n\t            },\n\t\n\t            selectionInContentEditableFalse: function (contentWindow) {\n\t                return this.findMatchingSelectionParent(function (el) {\n\t                    return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n\t                }, contentWindow);\n\t            },\n\t\n\t            // http://stackoverflow.com/questions/4176923/html-of-selected-text\n\t            // by Tim Down\n\t            getSelectionHtml: function getSelectionHtml() {\n\t                var i,\n\t                    html = \"\",\n\t                    sel,\n\t                    len,\n\t                    container;\n\t                if (this.options.contentWindow.getSelection !== undefined) {\n\t                    sel = this.options.contentWindow.getSelection();\n\t                    if (sel.rangeCount) {\n\t                        container = this.options.ownerDocument.createElement(\"div\");\n\t                        for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n\t                            container.appendChild(sel.getRangeAt(i).cloneContents());\n\t                        }\n\t                        html = container.innerHTML;\n\t                    }\n\t                } else if (this.options.ownerDocument.selection !== undefined) {\n\t                    if (this.options.ownerDocument.selection.type === \"Text\") {\n\t                        html = this.options.ownerDocument.selection.createRange().htmlText;\n\t                    }\n\t                }\n\t                return html;\n\t            },\n\t\n\t            /**\n\t             *  Find the caret position within an element irrespective of any inline tags it may contain.\n\t             *\n\t             *  @param {DOMElement} An element containing the cursor to find offsets relative to.\n\t             *  @param {Range} A Range representing cursor position. Will window.getSelection if none is passed.\n\t             *  @return {Object} 'left' and 'right' attributes contain offsets from begining and end of Element\n\t             */\n\t            getCaretOffsets: function getCaretOffsets(element, range) {\n\t                var preCaretRange, postCaretRange;\n\t\n\t                if (!range) {\n\t                    range = window.getSelection().getRangeAt(0);\n\t                }\n\t\n\t                preCaretRange = range.cloneRange();\n\t                postCaretRange = range.cloneRange();\n\t\n\t                preCaretRange.selectNodeContents(element);\n\t                preCaretRange.setEnd(range.endContainer, range.endOffset);\n\t\n\t                postCaretRange.selectNodeContents(element);\n\t                postCaretRange.setStart(range.endContainer, range.endOffset);\n\t\n\t                return {\n\t                    left: preCaretRange.toString().length,\n\t                    right: postCaretRange.toString().length\n\t                };\n\t            },\n\t\n\t            // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n\t            rangeSelectsSingleNode: function (range) {\n\t                var startNode = range.startContainer;\n\t                return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n\t            },\n\t\n\t            getSelectedParentElement: function (range) {\n\t                var selectedParentElement = null;\n\t                if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n\t                    selectedParentElement = range.startContainer.childNodes[range.startOffset];\n\t                } else if (range.startContainer.nodeType === 3) {\n\t                    selectedParentElement = range.startContainer.parentNode;\n\t                } else {\n\t                    selectedParentElement = range.startContainer;\n\t                }\n\t                return selectedParentElement;\n\t            },\n\t\n\t            getSelectionData: function (el) {\n\t                var tagName;\n\t\n\t                if (el && el.tagName) {\n\t                    tagName = el.tagName.toLowerCase();\n\t                }\n\t\n\t                while (el && Util.parentElements.indexOf(tagName) === -1) {\n\t                    el = el.parentNode;\n\t                    if (el && el.tagName) {\n\t                        tagName = el.tagName.toLowerCase();\n\t                    }\n\t                }\n\t\n\t                return {\n\t                    el: el,\n\t                    tagName: tagName\n\t                };\n\t            }\n\t        };\n\t    })(document, window);\n\t\n\t    var DefaultButton, ButtonsData;\n\t\n\t    (function (window, document) {\n\t        \"use strict\";\n\t\n\t        ButtonsData = {\n\t            bold: {\n\t                name: \"bold\",\n\t                action: \"bold\",\n\t                aria: \"bold\",\n\t                tagNames: [\"b\", \"strong\"],\n\t                style: {\n\t                    prop: \"font-weight\",\n\t                    value: \"700|bold\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b>B</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-bold\\\"></i>\",\n\t                key: \"b\"\n\t            },\n\t            italic: {\n\t                name: \"italic\",\n\t                action: \"italic\",\n\t                aria: \"italic\",\n\t                tagNames: [\"i\", \"em\"],\n\t                style: {\n\t                    prop: \"font-style\",\n\t                    value: \"italic\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b><i>I</i></b>\",\n\t                contentFA: \"<i class=\\\"fa fa-italic\\\"></i>\",\n\t                key: \"i\"\n\t            },\n\t            underline: {\n\t                name: \"underline\",\n\t                action: \"underline\",\n\t                aria: \"underline\",\n\t                tagNames: [\"u\"],\n\t                style: {\n\t                    prop: \"text-decoration\",\n\t                    value: \"underline\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b><u>U</u></b>\",\n\t                contentFA: \"<i class=\\\"fa fa-underline\\\"></i>\",\n\t                key: \"u\"\n\t            },\n\t            strikethrough: {\n\t                name: \"strikethrough\",\n\t                action: \"strikethrough\",\n\t                aria: \"strike through\",\n\t                tagNames: [\"strike\"],\n\t                style: {\n\t                    prop: \"text-decoration\",\n\t                    value: \"line-through\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<s>A</s>\",\n\t                contentFA: \"<i class=\\\"fa fa-strikethrough\\\"></i>\"\n\t            },\n\t            superscript: {\n\t                name: \"superscript\",\n\t                action: \"superscript\",\n\t                aria: \"superscript\",\n\t                tagNames: [\"sup\"],\n\t                /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for superscript\n\t                   https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n\t                // useQueryState: true\n\t                contentDefault: \"<b>x<sup>1</sup></b>\",\n\t                contentFA: \"<i class=\\\"fa fa-superscript\\\"></i>\"\n\t            },\n\t            subscript: {\n\t                name: \"subscript\",\n\t                action: \"subscript\",\n\t                aria: \"subscript\",\n\t                tagNames: [\"sub\"],\n\t                /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for subscript\n\t                   https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n\t                // useQueryState: true\n\t                contentDefault: \"<b>x<sub>1</sub></b>\",\n\t                contentFA: \"<i class=\\\"fa fa-subscript\\\"></i>\"\n\t            },\n\t            image: {\n\t                name: \"image\",\n\t                action: \"image\",\n\t                aria: \"image\",\n\t                tagNames: [\"img\"],\n\t                contentDefault: \"<b>image</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-picture-o\\\"></i>\"\n\t            },\n\t            quote: {\n\t                name: \"quote\",\n\t                action: \"append-blockquote\",\n\t                aria: \"blockquote\",\n\t                tagNames: [\"blockquote\"],\n\t                contentDefault: \"<b>&ldquo;</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-quote-right\\\"></i>\"\n\t            },\n\t            orderedlist: {\n\t                name: \"orderedlist\",\n\t                action: \"insertorderedlist\",\n\t                aria: \"ordered list\",\n\t                tagNames: [\"ol\"],\n\t                useQueryState: true,\n\t                contentDefault: \"<b>1.</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-list-ol\\\"></i>\"\n\t            },\n\t            unorderedlist: {\n\t                name: \"unorderedlist\",\n\t                action: \"insertunorderedlist\",\n\t                aria: \"unordered list\",\n\t                tagNames: [\"ul\"],\n\t                useQueryState: true,\n\t                contentDefault: \"<b>&bull;</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-list-ul\\\"></i>\"\n\t            },\n\t            pre: {\n\t                name: \"pre\",\n\t                action: \"append-pre\",\n\t                aria: \"preformatted text\",\n\t                tagNames: [\"pre\"],\n\t                contentDefault: \"<b>0101</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-code fa-lg\\\"></i>\"\n\t            },\n\t            indent: {\n\t                name: \"indent\",\n\t                action: \"indent\",\n\t                aria: \"indent\",\n\t                tagNames: [],\n\t                contentDefault: \"<b>&rarr;</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-indent\\\"></i>\"\n\t            },\n\t            outdent: {\n\t                name: \"outdent\",\n\t                action: \"outdent\",\n\t                aria: \"outdent\",\n\t                tagNames: [],\n\t                contentDefault: \"<b>&larr;</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-outdent\\\"></i>\"\n\t            },\n\t            justifyCenter: {\n\t                name: \"justifyCenter\",\n\t                action: \"justifyCenter\",\n\t                aria: \"center justify\",\n\t                tagNames: [],\n\t                style: {\n\t                    prop: \"text-align\",\n\t                    value: \"center\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b>C</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-align-center\\\"></i>\"\n\t            },\n\t            justifyFull: {\n\t                name: \"justifyFull\",\n\t                action: \"justifyFull\",\n\t                aria: \"full justify\",\n\t                tagNames: [],\n\t                style: {\n\t                    prop: \"text-align\",\n\t                    value: \"justify\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b>J</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-align-justify\\\"></i>\"\n\t            },\n\t            justifyLeft: {\n\t                name: \"justifyLeft\",\n\t                action: \"justifyLeft\",\n\t                aria: \"left justify\",\n\t                tagNames: [],\n\t                style: {\n\t                    prop: \"text-align\",\n\t                    value: \"left\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b>L</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-align-left\\\"></i>\"\n\t            },\n\t            justifyRight: {\n\t                name: \"justifyRight\",\n\t                action: \"justifyRight\",\n\t                aria: \"right justify\",\n\t                tagNames: [],\n\t                style: {\n\t                    prop: \"text-align\",\n\t                    value: \"right\"\n\t                },\n\t                useQueryState: true,\n\t                contentDefault: \"<b>R</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-align-right\\\"></i>\"\n\t            },\n\t            header1: {\n\t                name: \"header1\",\n\t                action: function (options) {\n\t                    return \"append-\" + options.firstHeader;\n\t                },\n\t                aria: function (options) {\n\t                    return options.firstHeader;\n\t                },\n\t                tagNames: function (options) {\n\t                    return [options.firstHeader];\n\t                },\n\t                contentDefault: \"<b>H1</b>\"\n\t            },\n\t            header2: {\n\t                name: \"header2\",\n\t                action: function (options) {\n\t                    return \"append-\" + options.secondHeader;\n\t                },\n\t                aria: function (options) {\n\t                    return options.secondHeader;\n\t                },\n\t                tagNames: function (options) {\n\t                    return [options.secondHeader];\n\t                },\n\t                contentDefault: \"<b>H2</b>\"\n\t            }\n\t        };\n\t\n\t        DefaultButton = function (options, instance) {\n\t            this.options = options;\n\t            this.name = options.name;\n\t            this.init(instance);\n\t        };\n\t\n\t        DefaultButton.prototype = {\n\t            init: function (instance) {\n\t                this.base = instance;\n\t\n\t                this.button = this.createButton();\n\t                this.base.on(this.button, \"click\", this.handleClick.bind(this));\n\t            },\n\t            getButton: function () {\n\t                return this.button;\n\t            },\n\t            getAction: function () {\n\t                return typeof this.options.action === \"function\" ? this.options.action(this.base.options) : this.options.action;\n\t            },\n\t            getAria: function () {\n\t                return typeof this.options.aria === \"function\" ? this.options.aria(this.base.options) : this.options.aria;\n\t            },\n\t            getTagNames: function () {\n\t                return typeof this.options.tagNames === \"function\" ? this.options.tagNames(this.base.options) : this.options.tagNames;\n\t            },\n\t            createButton: function () {\n\t                var button = this.base.options.ownerDocument.createElement(\"button\"),\n\t                    content = this.options.contentDefault;\n\t                button.classList.add(\"medium-editor-action\");\n\t                button.classList.add(\"medium-editor-action-\" + this.name);\n\t                button.setAttribute(\"data-action\", this.getAction());\n\t                button.setAttribute(\"aria-label\", this.getAria());\n\t                if (this.base.options.buttonLabels) {\n\t                    if (this.base.options.buttonLabels === \"fontawesome\" && this.options.contentFA) {\n\t                        content = this.options.contentFA;\n\t                    } else if (typeof this.base.options.buttonLabels === \"object\" && this.base.options.buttonLabels[this.name]) {\n\t                        content = this.base.options.buttonLabels[this.options.name];\n\t                    }\n\t                }\n\t                button.innerHTML = content;\n\t                return button;\n\t            },\n\t            handleClick: function (evt) {\n\t                evt.preventDefault();\n\t                evt.stopPropagation();\n\t\n\t                var action = this.getAction();\n\t\n\t                if (action) {\n\t                    this.base.execAction(action);\n\t                }\n\t            },\n\t            isActive: function () {\n\t                return this.button.classList.contains(this.base.options.activeButtonClass);\n\t            },\n\t            setInactive: function () {\n\t                this.button.classList.remove(this.base.options.activeButtonClass);\n\t                delete this.knownState;\n\t            },\n\t            setActive: function () {\n\t                this.button.classList.add(this.base.options.activeButtonClass);\n\t                delete this.knownState;\n\t            },\n\t            queryCommandState: function () {\n\t                var queryState = null;\n\t                if (this.options.useQueryState) {\n\t                    queryState = this.base.queryCommandState(this.getAction());\n\t                }\n\t                return queryState;\n\t            },\n\t            isAlreadyApplied: function (node) {\n\t                var isMatch = false,\n\t                    tagNames = this.getTagNames(),\n\t                    styleVals,\n\t                    computedStyle;\n\t\n\t                if (this.knownState === false || this.knownState === true) {\n\t                    return this.knownState;\n\t                }\n\t\n\t                if (tagNames && tagNames.length > 0 && node.tagName) {\n\t                    isMatch = tagNames.indexOf(node.tagName.toLowerCase()) !== -1;\n\t                }\n\t\n\t                if (!isMatch && this.options.style) {\n\t                    styleVals = this.options.style.value.split(\"|\");\n\t                    computedStyle = this.base.options.contentWindow.getComputedStyle(node, null).getPropertyValue(this.options.style.prop);\n\t                    styleVals.forEach((function (val) {\n\t                        if (!this.knownState) {\n\t                            this.knownState = isMatch = computedStyle.indexOf(val) !== -1;\n\t                        }\n\t                    }).bind(this));\n\t                }\n\t\n\t                return isMatch;\n\t            }\n\t        };\n\t    })(window, document);\n\t\n\t    var pasteHandler;\n\t\n\t    (function (window, document) {\n\t        \"use strict\";\n\t        /*jslint regexp: true*/\n\t        /*\n\t            jslint does not allow character negation, because the negation\n\t            will not match any unicode characters. In the regexes in this\n\t            block, negation is used specifically to match the end of an html\n\t            tag, and in fact unicode characters *should* be allowed.\n\t        */\n\t        function createReplacements() {\n\t            return [\n\t\n\t            // replace two bogus tags that begin pastes from google docs\n\t            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"], [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\t\n\t            // un-html spaces and newlines inserted by OS X\n\t            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), \" \"], [new RegExp(/<br class=\"Apple-interchange-newline\">/g), \"<br>\"],\n\t\n\t            // replace google docs italics+bold with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), \"<span class=\\\"replace-with italic bold\\\">\"],\n\t\n\t            // replace google docs italics with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), \"<span class=\\\"replace-with italic\\\">\"],\n\t\n\t            //[replace google docs bolds with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), \"<span class=\\\"replace-with bold\\\">\"],\n\t\n\t            // replace manually entered b/i/a tags with real ones\n\t            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), \"<$1$2>\"],\n\t\n\t            // replace manually a tags with real ones, converting smart-quotes from google docs\n\t            [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), \"<a href=\\\"$2\\\">\"]];\n\t        }\n\t        /*jslint regexp: false*/\n\t\n\t        pasteHandler = {\n\t            handlePaste: function (element, evt, options) {\n\t                var paragraphs,\n\t                    html = \"\",\n\t                    p,\n\t                    dataFormatHTML = \"text/html\",\n\t                    dataFormatPlain = \"text/plain\";\n\t\n\t                element.classList.remove(\"medium-editor-placeholder\");\n\t                if (!options.forcePlainText && !options.cleanPastedHTML) {\n\t                    return element;\n\t                }\n\t\n\t                if (options.contentWindow.clipboardData && evt.clipboardData === undefined) {\n\t                    evt.clipboardData = options.contentWindow.clipboardData;\n\t                    // If window.clipboardData exists, but e.clipboardData doesn't exist,\n\t                    // we're probably in IE. IE only has two possibilities for clipboard\n\t                    // data format: 'Text' and 'URL'.\n\t                    //\n\t                    // Of the two, we want 'Text':\n\t                    dataFormatHTML = \"Text\";\n\t                    dataFormatPlain = \"Text\";\n\t                }\n\t\n\t                if (evt.clipboardData && evt.clipboardData.getData && !evt.defaultPrevented) {\n\t                    evt.preventDefault();\n\t\n\t                    if (options.cleanPastedHTML && evt.clipboardData.getData(dataFormatHTML)) {\n\t                        return this.cleanPaste(evt.clipboardData.getData(dataFormatHTML), options);\n\t                    }\n\t                    if (!(options.disableReturn || element.getAttribute(\"data-disable-return\"))) {\n\t                        paragraphs = evt.clipboardData.getData(dataFormatPlain).split(/[\\r\\n]/g);\n\t                        for (p = 0; p < paragraphs.length; p += 1) {\n\t                            if (paragraphs[p] !== \"\") {\n\t                                html += \"<p>\" + Util.htmlEntities(paragraphs[p]) + \"</p>\";\n\t                            }\n\t                        }\n\t                        Util.insertHTMLCommand(options.ownerDocument, html);\n\t                    } else {\n\t                        html = Util.htmlEntities(evt.clipboardData.getData(dataFormatPlain));\n\t                        Util.insertHTMLCommand(options.ownerDocument, html);\n\t                    }\n\t                }\n\t            },\n\t\n\t            cleanPaste: function (text, options) {\n\t                var i,\n\t                    elList,\n\t                    workEl,\n\t                    el = Selection.getSelectionElement(options.contentWindow),\n\t                    multiline = /<p|<br|<div/.test(text),\n\t                    replacements = createReplacements();\n\t\n\t                for (i = 0; i < replacements.length; i += 1) {\n\t                    text = text.replace(replacements[i][0], replacements[i][1]);\n\t                }\n\t\n\t                if (multiline) {\n\t                    // double br's aren't converted to p tags, but we want paragraphs.\n\t                    elList = text.split(\"<br><br>\");\n\t\n\t                    this.pasteHTML(\"<p>\" + elList.join(\"</p><p>\") + \"</p>\", options.ownerDocument);\n\t\n\t                    try {\n\t                        options.ownerDocument.execCommand(\"insertText\", false, \"\\n\");\n\t                    } catch (ignore) {}\n\t\n\t                    // block element cleanup\n\t                    elList = el.querySelectorAll(\"a,p,div,br\");\n\t                    for (i = 0; i < elList.length; i += 1) {\n\t                        workEl = elList[i];\n\t\n\t                        switch (workEl.tagName.toLowerCase()) {\n\t                            case \"a\":\n\t                                if (options.targetBlank) {\n\t                                    Util.setTargetBlank(workEl);\n\t                                }\n\t                                break;\n\t                            case \"p\":\n\t                            case \"div\":\n\t                                this.filterCommonBlocks(workEl);\n\t                                break;\n\t                            case \"br\":\n\t                                this.filterLineBreak(workEl);\n\t                                break;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this.pasteHTML(text, options.ownerDocument);\n\t                }\n\t            },\n\t\n\t            pasteHTML: function (html, ownerDocument) {\n\t                var elList,\n\t                    workEl,\n\t                    i,\n\t                    fragmentBody,\n\t                    pasteBlock = ownerDocument.createDocumentFragment();\n\t\n\t                pasteBlock.appendChild(ownerDocument.createElement(\"body\"));\n\t\n\t                fragmentBody = pasteBlock.querySelector(\"body\");\n\t                fragmentBody.innerHTML = html;\n\t\n\t                this.cleanupSpans(fragmentBody, ownerDocument);\n\t\n\t                elList = fragmentBody.querySelectorAll(\"*\");\n\t                for (i = 0; i < elList.length; i += 1) {\n\t                    workEl = elList[i];\n\t\n\t                    // delete ugly attributes\n\t                    workEl.removeAttribute(\"class\");\n\t                    workEl.removeAttribute(\"style\");\n\t                    workEl.removeAttribute(\"dir\");\n\t\n\t                    if (workEl.tagName.toLowerCase() === \"meta\") {\n\t                        workEl.parentNode.removeChild(workEl);\n\t                    }\n\t                }\n\t                Util.insertHTMLCommand(ownerDocument, fragmentBody.innerHTML.replace(/&nbsp;/g, \" \"));\n\t            },\n\t            isCommonBlock: function (el) {\n\t                return el && (el.tagName.toLowerCase() === \"p\" || el.tagName.toLowerCase() === \"div\");\n\t            },\n\t            filterCommonBlocks: function (el) {\n\t                if (/^\\s*$/.test(el.textContent)) {\n\t                    el.parentNode.removeChild(el);\n\t                }\n\t            },\n\t            filterLineBreak: function (el) {\n\t                if (this.isCommonBlock(el.previousElementSibling)) {\n\t                    // remove stray br's following common block elements\n\t                    el.parentNode.removeChild(el);\n\t                } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n\t                    // remove br's just inside open or close tags of a div/p\n\t                    el.parentNode.removeChild(el);\n\t                } else if (el.parentNode.childElementCount === 1 && el.parentNode.textContent === \"\") {\n\t                    // and br's that are the only child of a div/p\n\t                    this.removeWithParent(el);\n\t                }\n\t            },\n\t\n\t            // remove an element, including its parent, if it is the only element within its parent\n\t            removeWithParent: function (el) {\n\t                if (el && el.parentNode) {\n\t                    if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n\t                        el.parentNode.parentNode.removeChild(el.parentNode);\n\t                    } else {\n\t                        el.parentNode.removeChild(el.parentNode);\n\t                    }\n\t                }\n\t            },\n\t\n\t            cleanupSpans: function (container_el, ownerDocument) {\n\t                var i,\n\t                    el,\n\t                    new_el,\n\t                    spans = container_el.querySelectorAll(\".replace-with\"),\n\t                    isCEF = function (el) {\n\t                    return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n\t                };\n\t\n\t                for (i = 0; i < spans.length; i += 1) {\n\t                    el = spans[i];\n\t                    new_el = ownerDocument.createElement(el.classList.contains(\"bold\") ? \"b\" : \"i\");\n\t\n\t                    if (el.classList.contains(\"bold\") && el.classList.contains(\"italic\")) {\n\t                        // add an i tag as well if this has both italics and bold\n\t                        new_el.innerHTML = \"<i>\" + el.innerHTML + \"</i>\";\n\t                    } else {\n\t                        new_el.innerHTML = el.innerHTML;\n\t                    }\n\t                    el.parentNode.replaceChild(new_el, el);\n\t                }\n\t\n\t                spans = container_el.querySelectorAll(\"span\");\n\t                for (i = 0; i < spans.length; i += 1) {\n\t                    el = spans[i];\n\t\n\t                    // bail if span is in contenteditable = false\n\t                    if (Util.traverseUp(el, isCEF)) {\n\t                        return false;\n\t                    }\n\t\n\t                    // remove empty spans, replace others with their contents\n\t                    if (/^\\s*$/.test()) {\n\t                        el.parentNode.removeChild(el);\n\t                    } else {\n\t                        el.parentNode.replaceChild(ownerDocument.createTextNode(el.textContent), el);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    })(window, document);\n\t\n\t    var AnchorExtension;\n\t\n\t    (function (window, document) {\n\t        \"use strict\";\n\t\n\t        function AnchorDerived() {\n\t            this.parent = true;\n\t            this.options = {\n\t                name: \"anchor\",\n\t                action: \"createLink\",\n\t                aria: \"link\",\n\t                tagNames: [\"a\"],\n\t                contentDefault: \"<b>#</b>\",\n\t                contentFA: \"<i class=\\\"fa fa-link\\\"></i>\"\n\t            };\n\t            this.name = \"anchor\";\n\t            this.hasForm = true;\n\t        }\n\t\n\t        AnchorDerived.prototype = {\n\t\n\t            // Button and Extension handling\n\t\n\t            // Called when the button the toolbar is clicked\n\t            // Overrides DefaultButton.handleClick\n\t            handleClick: function (evt) {\n\t                evt.preventDefault();\n\t                evt.stopPropagation();\n\t\n\t                if (!this.base.selection) {\n\t                    this.base.checkSelection();\n\t                }\n\t\n\t                var selectedParentElement = Selection.getSelectedParentElement(this.base.selectionRange);\n\t                if (selectedParentElement.tagName && selectedParentElement.tagName.toLowerCase() === \"a\") {\n\t                    return this.base.execAction(\"unlink\");\n\t                }\n\t\n\t                if (!this.isDisplayed()) {\n\t                    this.showForm();\n\t                }\n\t\n\t                return false;\n\t            },\n\t\n\t            // Called by medium-editor to append form to the toolbar\n\t            getForm: function () {\n\t                if (!this.anchorForm) {\n\t                    this.anchorForm = this.createForm();\n\t                }\n\t                return this.anchorForm;\n\t            },\n\t\n\t            // Used by medium-editor when the default toolbar is to be displayed\n\t            isDisplayed: function () {\n\t                return this.getForm().style.display === \"block\";\n\t            },\n\t\n\t            hideForm: function () {\n\t                this.getForm().style.display = \"none\";\n\t                this.getInput().value = \"\";\n\t            },\n\t\n\t            showForm: function (link_value) {\n\t                var input = this.getInput();\n\t\n\t                this.base.saveSelection();\n\t                this.base.hideToolbarDefaultActions();\n\t                this.getForm().style.display = \"block\";\n\t                this.base.setToolbarPosition();\n\t                this.base.keepToolbarAlive = true;\n\t\n\t                input.value = link_value || \"\";\n\t                input.focus();\n\t            },\n\t\n\t            // Called by core when tearing down medium-editor (deactivate)\n\t            deactivate: function () {\n\t                if (!this.anchorForm) {\n\t                    return false;\n\t                }\n\t\n\t                if (this.anchorForm.parentNode) {\n\t                    this.anchorForm.parentNode.removeChild(this.anchorForm);\n\t                }\n\t\n\t                delete this.anchorForm;\n\t            },\n\t\n\t            // core methods\n\t\n\t            doLinkCreation: function () {\n\t                var targetCheckbox = this.getForm().querySelector(\".medium-editor-toolbar-anchor-target\"),\n\t                    buttonCheckbox = this.getForm().querySelector(\".medium-editor-toolbar-anchor-button\"),\n\t                    opts = {\n\t                    url: this.getInput().value\n\t                };\n\t\n\t                this.base.restoreSelection();\n\t\n\t                if (this.base.options.checkLinkFormat) {\n\t                    opts.url = this.checkLinkFormat(opts.url);\n\t                }\n\t\n\t                if (targetCheckbox && targetCheckbox.checked) {\n\t                    opts.target = \"_blank\";\n\t                } else {\n\t                    opts.target = \"_self\";\n\t                }\n\t\n\t                if (buttonCheckbox && buttonCheckbox.checked) {\n\t                    opts.buttonClass = this.base.options.anchorButtonClass;\n\t                }\n\t\n\t                this.base.createLink(opts);\n\t                this.base.keepToolbarAlive = false;\n\t                this.base.checkSelection();\n\t            },\n\t\n\t            checkLinkFormat: function (value) {\n\t                var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n\t                return (re.test(value) ? \"\" : \"http://\") + value;\n\t            },\n\t\n\t            doFormCancel: function () {\n\t                this.base.restoreSelection();\n\t                this.base.keepToolbarAlive = false;\n\t                this.base.checkSelection();\n\t            },\n\t\n\t            // form creation and event handling\n\t\n\t            createForm: function () {\n\t                var doc = this.base.options.ownerDocument,\n\t                    form = doc.createElement(\"div\"),\n\t                    input = doc.createElement(\"input\"),\n\t                    close = doc.createElement(\"a\"),\n\t                    save = doc.createElement(\"a\"),\n\t                    target,\n\t                    target_label,\n\t                    button,\n\t                    button_label;\n\t\n\t                // Anchor Form (div)\n\t                form.className = \"medium-editor-toolbar-form\";\n\t                form.id = \"medium-editor-toolbar-form-anchor-\" + this.base.id;\n\t\n\t                // Handle clicks on the form itself\n\t                this.base.on(form, \"click\", this.handleFormClick.bind(this));\n\t\n\t                // Add url textbox\n\t                input.setAttribute(\"type\", \"text\");\n\t                input.className = \"medium-editor-toolbar-input\";\n\t                input.setAttribute(\"placeholder\", this.base.options.anchorInputPlaceholder);\n\t                form.appendChild(input);\n\t\n\t                // Handle typing in the textbox\n\t                this.base.on(input, \"keyup\", this.handleTextboxKeyup.bind(this));\n\t\n\t                // Handle clicks into the textbox\n\t                this.base.on(input, \"click\", this.handleFormClick.bind(this));\n\t\n\t                // Add save buton\n\t                save.setAttribute(\"href\", \"#\");\n\t                save.className = \"medium-editor-toobar-save\";\n\t                save.innerHTML = this.base.options.buttonLabels === \"fontawesome\" ? \"<i class=\\\"fa fa-check\\\"></i>\" : \"&#10003;\";\n\t                form.appendChild(save);\n\t\n\t                // Handle save button clicks (capture)\n\t                this.base.on(save, \"click\", this.handleSaveClick.bind(this), true);\n\t\n\t                // Add close button\n\t                close.setAttribute(\"href\", \"#\");\n\t                close.className = \"medium-editor-toobar-close\";\n\t                close.innerHTML = this.base.options.buttonLabels === \"fontawesome\" ? \"<i class=\\\"fa fa-times\\\"></i>\" : \"&times;\";\n\t                form.appendChild(close);\n\t\n\t                // Handle close button clicks\n\t                this.base.on(close, \"click\", this.handleCloseClick.bind(this));\n\t\n\t                // (Optional) Add 'open in new window' checkbox\n\t                if (this.base.options.anchorTarget) {\n\t                    target = doc.createElement(\"input\");\n\t                    target.setAttribute(\"type\", \"checkbox\");\n\t                    target.className = \"medium-editor-toolbar-anchor-target\";\n\t\n\t                    target_label = doc.createElement(\"label\");\n\t                    target_label.innerHTML = this.base.options.anchorInputCheckboxLabel;\n\t                    target_label.insertBefore(target, target_label.firstChild);\n\t\n\t                    form.appendChild(target_label);\n\t                }\n\t\n\t                // (Optional) Add 'add button class to anchor' checkbox\n\t                if (this.base.options.anchorButton) {\n\t                    button = doc.createElement(\"input\");\n\t                    button.setAttribute(\"type\", \"checkbox\");\n\t                    button.className = \"medium-editor-toolbar-anchor-button\";\n\t\n\t                    button_label = doc.createElement(\"label\");\n\t                    button_label.innerHTML = \"Button\";\n\t                    button_label.insertBefore(button, button_label.firstChild);\n\t\n\t                    form.appendChild(button_label);\n\t                }\n\t\n\t                // Handle click (capture) & focus (capture) outside of the form\n\t                this.base.on(doc.body, \"click\", this.handleOutsideInteraction.bind(this), true);\n\t                this.base.on(doc.body, \"focus\", this.handleOutsideInteraction.bind(this), true);\n\t\n\t                return form;\n\t            },\n\t\n\t            getInput: function () {\n\t                return this.getForm().querySelector(\"input.medium-editor-toolbar-input\");\n\t            },\n\t\n\t            handleOutsideInteraction: function (event) {\n\t                if (event.target !== this.getForm() && !Util.isDescendant(this.getForm(), event.target) && !Util.isDescendant(this.base.toolbarActions, event.target)) {\n\t                    this.base.keepToolbarAlive = false;\n\t                    this.base.checkSelection();\n\t                }\n\t            },\n\t\n\t            handleTextboxKeyup: function (event) {\n\t                // For ENTER -> create the anchor\n\t                if (event.keyCode === Util.keyCode.ENTER) {\n\t                    event.preventDefault();\n\t                    this.doLinkCreation();\n\t                    return;\n\t                }\n\t\n\t                // For ESCAPE -> close the form\n\t                if (event.keyCode === Util.keyCode.ESCAPE) {\n\t                    event.preventDefault();\n\t                    this.doFormCancel();\n\t                }\n\t            },\n\t\n\t            handleFormClick: function (event) {\n\t                // make sure not to hide form when clicking inside the form\n\t                event.stopPropagation();\n\t                this.base.keepToolbarAlive = true;\n\t            },\n\t\n\t            handleSaveClick: function (event) {\n\t                // Clicking Save -> create the anchor\n\t                event.preventDefault();\n\t                this.doLinkCreation();\n\t            },\n\t\n\t            handleCloseClick: function (event) {\n\t                // Click Close -> close the form\n\t                event.preventDefault();\n\t                this.doFormCancel();\n\t            }\n\t        };\n\t\n\t        AnchorExtension = Util.derives(DefaultButton, AnchorDerived);\n\t    })(window, document);\n\t\n\t    function MediumEditor(elements, options) {\n\t        \"use strict\";\n\t        return this.init(elements, options);\n\t    }\n\t\n\t    (function () {\n\t        \"use strict\";\n\t\n\t        MediumEditor.statics = {\n\t            ButtonsData: ButtonsData,\n\t            DefaultButton: DefaultButton,\n\t            AnchorExtension: AnchorExtension\n\t        };\n\t\n\t        MediumEditor.prototype = {\n\t            defaults: {\n\t                allowMultiParagraphSelection: true,\n\t                anchorInputPlaceholder: \"Paste or type a link\",\n\t                anchorInputCheckboxLabel: \"Open in new window\",\n\t                anchorPreviewHideDelay: 500,\n\t                buttons: [\"bold\", \"italic\", \"underline\", \"anchor\", \"header1\", \"header2\", \"quote\"],\n\t                buttonLabels: false,\n\t                checkLinkFormat: false,\n\t                cleanPastedHTML: false,\n\t                delay: 0,\n\t                diffLeft: 0,\n\t                diffTop: -10,\n\t                disableReturn: false,\n\t                disableDoubleReturn: false,\n\t                disableToolbar: false,\n\t                disableEditing: false,\n\t                disablePlaceholders: false,\n\t                toolbarAlign: \"center\",\n\t                elementsContainer: false,\n\t                imageDragging: true,\n\t                standardizeSelectionStart: false,\n\t                contentWindow: window,\n\t                ownerDocument: document,\n\t                firstHeader: \"h3\",\n\t                forcePlainText: true,\n\t                placeholder: \"Type your text\",\n\t                secondHeader: \"h4\",\n\t                targetBlank: false,\n\t                anchorTarget: false,\n\t                anchorButton: false,\n\t                anchorButtonClass: \"btn\",\n\t                extensions: {},\n\t                activeButtonClass: \"medium-editor-button-active\",\n\t                firstButtonClass: \"medium-editor-button-first\",\n\t                lastButtonClass: \"medium-editor-button-last\"\n\t            },\n\t\n\t            init: function (elements, options) {\n\t                var uniqueId = 1;\n\t\n\t                this.options = Util.defaults(options, this.defaults);\n\t                this.setElementSelection(elements);\n\t                if (this.elements.length === 0) {\n\t                    return;\n\t                }\n\t\n\t                if (!this.options.elementsContainer) {\n\t                    this.options.elementsContainer = this.options.ownerDocument.body;\n\t                }\n\t\n\t                while (this.options.elementsContainer.querySelector(\"#medium-editor-toolbar-\" + uniqueId)) {\n\t                    uniqueId = uniqueId + 1;\n\t                }\n\t\n\t                this.id = uniqueId;\n\t\n\t                return this.setup();\n\t            },\n\t\n\t            setup: function () {\n\t                this.events = [];\n\t                this.isActive = true;\n\t                this.initThrottledMethods().initCommands().initElements().bindSelect().bindDragDrop().bindPaste().setPlaceholders().bindElementActions().bindWindowActions();\n\t            },\n\t\n\t            on: function (target, event, listener, useCapture) {\n\t                target.addEventListener(event, listener, useCapture);\n\t                this.events.push([target, event, listener, useCapture]);\n\t            },\n\t\n\t            off: function (target, event, listener, useCapture) {\n\t                var index = this.indexOfListener(target, event, listener, useCapture),\n\t                    e;\n\t                if (index !== -1) {\n\t                    e = this.events.splice(index, 1)[0];\n\t                    e[0].removeEventListener(e[1], e[2], e[3]);\n\t                }\n\t            },\n\t\n\t            indexOfListener: function (target, event, listener, useCapture) {\n\t                var i, n, item;\n\t                for (i = 0, n = this.events.length; i < n; i = i + 1) {\n\t                    item = this.events[i];\n\t                    if (item[0] === target && item[1] === event && item[2] === listener && item[3] === useCapture) {\n\t                        return i;\n\t                    }\n\t                }\n\t                return -1;\n\t            },\n\t\n\t            delay: function (fn) {\n\t                var self = this;\n\t                setTimeout(function () {\n\t                    if (self.isActive) {\n\t                        fn();\n\t                    }\n\t                }, this.options.delay);\n\t            },\n\t\n\t            removeAllEvents: function () {\n\t                var e = this.events.pop();\n\t                while (e) {\n\t                    e[0].removeEventListener(e[1], e[2], e[3]);\n\t                    e = this.events.pop();\n\t                }\n\t            },\n\t\n\t            initThrottledMethods: function () {\n\t                var self = this;\n\t\n\t                // handleResize is throttled because:\n\t                // - It will be called when the browser is resizing, which can fire many times very quickly\n\t                // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\n\t                this.handleResize = Util.throttle(function () {\n\t                    if (self.isActive) {\n\t                        self.positionToolbarIfShown();\n\t                    }\n\t                });\n\t\n\t                // handleBlur is throttled because:\n\t                // - This method could be called many times due to the type of event handlers that are calling it\n\t                // - We want a slight delay so that other events in the stack can run, some of which may\n\t                //   prevent the toolbar from being hidden (via this.keepToolbarAlive).\n\t                this.handleBlur = Util.throttle(function () {\n\t                    if (self.isActive && !self.keepToolbarAlive) {\n\t                        self.hideToolbarActions();\n\t                    }\n\t                });\n\t\n\t                return this;\n\t            },\n\t\n\t            initElements: function () {\n\t                var i,\n\t                    addToolbar = false;\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    if (!this.options.disableEditing && !this.elements[i].getAttribute(\"data-disable-editing\")) {\n\t                        this.elements[i].setAttribute(\"contentEditable\", true);\n\t                    }\n\t                    if (!this.elements[i].getAttribute(\"data-placeholder\")) {\n\t                        this.elements[i].setAttribute(\"data-placeholder\", this.options.placeholder);\n\t                    }\n\t                    this.elements[i].setAttribute(\"data-medium-element\", true);\n\t                    this.elements[i].setAttribute(\"role\", \"textbox\");\n\t                    this.elements[i].setAttribute(\"aria-multiline\", true);\n\t                    this.bindParagraphCreation(i);\n\t                    if (!this.options.disableToolbar && !this.elements[i].getAttribute(\"data-disable-toolbar\")) {\n\t                        addToolbar = true;\n\t                    }\n\t                }\n\t                // Init toolbar\n\t                if (addToolbar) {\n\t                    this.initToolbar().setFirstAndLastButtons().bindAnchorPreview();\n\t                }\n\t                return this;\n\t            },\n\t\n\t            setElementSelection: function (selector) {\n\t                if (!selector) {\n\t                    selector = [];\n\t                }\n\t                // If string, use as query selector\n\t                if (typeof selector === \"string\") {\n\t                    selector = this.options.ownerDocument.querySelectorAll(selector);\n\t                }\n\t                // If element, put into array\n\t                if (Util.isElement(selector)) {\n\t                    selector = [selector];\n\t                }\n\t                // Convert NodeList (or other array like object) into an array\n\t                this.elements = Array.prototype.slice.apply(selector);\n\t            },\n\t\n\t            bindBlur: function () {\n\t                var self = this,\n\t                    blurFunction = function (e) {\n\t                    var isDescendantOfEditorElements = false,\n\t                        selection = self.options.contentWindow.getSelection(),\n\t                        selRange = selection.isCollapsed ? null : Selection.getSelectedParentElement(selection.getRangeAt(0)),\n\t                        i;\n\t\n\t                    // This control was introduced also to avoid the toolbar\n\t                    // to disapper when selecting from right to left and\n\t                    // the selection ends at the beginning of the text.\n\t                    for (i = 0; i < self.elements.length; i += 1) {\n\t                        if (Util.isDescendant(self.elements[i], e.target) || Util.isDescendant(self.elements[i], selRange)) {\n\t                            isDescendantOfEditorElements = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    // If it's not part of the editor, or the toolbar\n\t                    if (e.target !== self.toolbar && self.elements.indexOf(e.target) === -1 && !isDescendantOfEditorElements && !Util.isDescendant(self.toolbar, e.target) && !Util.isDescendant(self.anchorPreview, e.target)) {\n\t                        // Activate the placeholder\n\t                        if (!self.options.disablePlaceholders) {\n\t                            self.placeholderWrapper(e, self.elements[0]);\n\t                        }\n\t\n\t                        // Hide the toolbar after a small delay so we can prevent this on toolbar click\n\t                        self.handleBlur();\n\t                    }\n\t                };\n\t\n\t                // Hide the toolbar when focusing outside of the editor.\n\t                this.on(this.options.ownerDocument.body, \"click\", blurFunction, true);\n\t                this.on(this.options.ownerDocument.body, \"focus\", blurFunction, true);\n\t\n\t                return this;\n\t            },\n\t\n\t            bindClick: function (i) {\n\t                var self = this;\n\t\n\t                this.on(this.elements[i], \"click\", function () {\n\t                    if (!self.options.disablePlaceholders) {\n\t                        // Remove placeholder\n\t                        this.classList.remove(\"medium-editor-placeholder\");\n\t                    }\n\t\n\t                    if (self.options.staticToolbar) {\n\t                        self.setToolbarPosition();\n\t                    }\n\t                });\n\t\n\t                return this;\n\t            },\n\t\n\t            /**\n\t             * This handles blur and keypress events on elements\n\t             * Including Placeholders, and tooldbar hiding on blur\n\t             */\n\t            bindElementActions: function () {\n\t                var i;\n\t\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    if (!this.options.disablePlaceholders) {\n\t                        // Active all of the placeholders\n\t                        this.activatePlaceholder(this.elements[i]);\n\t                    }\n\t\n\t                    // Bind the return and tab keypress events\n\t                    this.bindReturn(i).bindKeydown(i).bindClick(i);\n\t                }\n\t\n\t                return this;\n\t            },\n\t\n\t            // Two functions to handle placeholders\n\t            activatePlaceholder: function (el) {\n\t                if (!el.querySelector(\"img\") && !el.querySelector(\"blockquote\") && el.textContent.replace(/^\\s+|\\s+$/g, \"\") === \"\") {\n\t                    el.classList.add(\"medium-editor-placeholder\");\n\t                }\n\t            },\n\t            placeholderWrapper: function (evt, el) {\n\t                el = el || evt.target;\n\t                el.classList.remove(\"medium-editor-placeholder\");\n\t                if (evt.type !== \"keypress\") {\n\t                    this.activatePlaceholder(el);\n\t                }\n\t            },\n\t\n\t            serialize: function () {\n\t                var i,\n\t                    elementid,\n\t                    content = {};\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    elementid = this.elements[i].id !== \"\" ? this.elements[i].id : \"element-\" + i;\n\t                    content[elementid] = {\n\t                        value: this.elements[i].innerHTML.trim()\n\t                    };\n\t                }\n\t                return content;\n\t            },\n\t\n\t            initExtension: function (extension, name) {\n\t                if (extension.parent) {\n\t                    extension.base = this;\n\t                }\n\t                if (typeof extension.init === \"function\") {\n\t                    extension.init(this);\n\t                }\n\t                if (!extension.name) {\n\t                    extension.name = name;\n\t                }\n\t                return extension;\n\t            },\n\t\n\t            initCommands: function () {\n\t                var buttons = this.options.buttons,\n\t                    extensions = this.options.extensions,\n\t                    ext,\n\t                    name;\n\t                this.commands = [];\n\t\n\t                buttons.forEach((function (buttonName) {\n\t                    if (extensions[buttonName]) {\n\t                        ext = this.initExtension(extensions[buttonName], buttonName);\n\t                        this.commands.push(ext);\n\t                    } else if (buttonName === \"anchor\") {\n\t                        ext = this.initExtension(new AnchorExtension(), buttonName);\n\t                        this.commands.push(ext);\n\t                    } else if (ButtonsData.hasOwnProperty(buttonName)) {\n\t                        ext = new DefaultButton(ButtonsData[buttonName], this);\n\t                        this.commands.push(ext);\n\t                    }\n\t                }).bind(this));\n\t\n\t                for (name in extensions) {\n\t                    if (extensions.hasOwnProperty(name) && buttons.indexOf(name) === -1) {\n\t                        ext = this.initExtension(extensions[name], name);\n\t                    }\n\t                }\n\t\n\t                return this;\n\t            },\n\t\n\t            getExtensionByName: function (name) {\n\t                var extension;\n\t                if (this.commands && this.commands.length) {\n\t                    this.commands.forEach(function (ext) {\n\t                        if (ext.name === name) {\n\t                            extension = ext;\n\t                        }\n\t                    });\n\t                }\n\t                return extension;\n\t            },\n\t\n\t            /**\n\t             * Helper function to call a method with a number of parameters on all registered extensions.\n\t             * The function assures that the function exists before calling.\n\t             *\n\t             * @param {string} funcName name of the function to call\n\t             * @param [args] arguments passed into funcName\n\t             */\n\t            callExtensions: function (funcName) {\n\t                if (arguments.length < 1) {\n\t                    return;\n\t                }\n\t\n\t                var args = Array.prototype.slice.call(arguments, 1),\n\t                    ext,\n\t                    name;\n\t\n\t                for (name in this.options.extensions) {\n\t                    if (this.options.extensions.hasOwnProperty(name)) {\n\t                        ext = this.options.extensions[name];\n\t                        if (ext[funcName] !== undefined) {\n\t                            ext[funcName].apply(ext, args);\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            },\n\t\n\t            bindParagraphCreation: function (index) {\n\t                var self = this;\n\t                this.on(this.elements[index], \"keypress\", function (e) {\n\t                    var node, tagName;\n\t                    if (e.which === Util.keyCode.SPACE) {\n\t                        node = Selection.getSelectionStart(self.options.ownerDocument);\n\t                        tagName = node.tagName.toLowerCase();\n\t                        if (tagName === \"a\") {\n\t                            self.options.ownerDocument.execCommand(\"unlink\", false, null);\n\t                        }\n\t                    }\n\t                });\n\t\n\t                this.on(this.elements[index], \"keyup\", function (e) {\n\t                    var node = Selection.getSelectionStart(self.options.ownerDocument),\n\t                        tagName,\n\t                        editorElement;\n\t\n\t                    if (node && node.getAttribute(\"data-medium-element\") && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute(\"data-disable-return\"))) {\n\t                        self.options.ownerDocument.execCommand(\"formatBlock\", false, \"p\");\n\t                    }\n\t                    if (e.which === Util.keyCode.ENTER) {\n\t                        node = Selection.getSelectionStart(self.options.ownerDocument);\n\t                        tagName = node.tagName.toLowerCase();\n\t                        editorElement = Selection.getSelectionElement(self.options.contentWindow);\n\t\n\t                        if (!(self.options.disableReturn || editorElement.getAttribute(\"data-disable-return\")) && tagName !== \"li\" && !Util.isListItemChild(node)) {\n\t                            if (!e.shiftKey) {\n\t                                // paragraph creation should not be forced within a header tag\n\t                                if (!/h\\d/.test(tagName)) {\n\t                                    self.options.ownerDocument.execCommand(\"formatBlock\", false, \"p\");\n\t                                }\n\t                            }\n\t                            if (tagName === \"a\") {\n\t                                self.options.ownerDocument.execCommand(\"unlink\", false, null);\n\t                            }\n\t                        }\n\t                    }\n\t                });\n\t                return this;\n\t            },\n\t\n\t            bindReturn: function (index) {\n\t                var self = this;\n\t                this.on(this.elements[index], \"keypress\", function (e) {\n\t                    if (e.which === Util.keyCode.ENTER) {\n\t                        if (self.options.disableReturn || this.getAttribute(\"data-disable-return\")) {\n\t                            e.preventDefault();\n\t                        } else if (self.options.disableDoubleReturn || this.getAttribute(\"data-disable-double-return\")) {\n\t                            var node = Selection.getSelectionStart(self.options.contentWindow);\n\t                            if (node && node.textContent.trim() === \"\") {\n\t                                e.preventDefault();\n\t                            }\n\t                        }\n\t                    }\n\t                });\n\t                return this;\n\t            },\n\t\n\t            bindKeydown: function (index) {\n\t                var self = this;\n\t                this.on(this.elements[index], \"keydown\", function (e) {\n\t                    var node, tag, key;\n\t\n\t                    if (e.which === Util.keyCode.TAB) {\n\t                        // Override tab only for pre nodes\n\t                        node = Selection.getSelectionStart(self.options.ownerDocument);\n\t                        tag = node && node.tagName.toLowerCase();\n\t\n\t                        if (tag === \"pre\") {\n\t                            e.preventDefault();\n\t                            self.options.ownerDocument.execCommand(\"insertHtml\", null, \"    \");\n\t                        }\n\t\n\t                        // Tab to indent list structures!\n\t                        if (tag === \"li\" || Util.isListItemChild(node)) {\n\t                            e.preventDefault();\n\t\n\t                            // If Shift is down, outdent, otherwise indent\n\t                            if (e.shiftKey) {\n\t                                self.options.ownerDocument.execCommand(\"outdent\", e);\n\t                            } else {\n\t                                self.options.ownerDocument.execCommand(\"indent\", e);\n\t                            }\n\t                        }\n\t                    } else if (e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.DELETE || e.which === Util.keyCode.ENTER) {\n\t                        // Bind keys which can create or destroy a block element: backspace, delete, return\n\t                        self.onBlockModifier(e);\n\t                    } else if (e.ctrlKey || e.metaKey) {\n\t                        key = String.fromCharCode(e.which || e.keyCode).toLowerCase();\n\t                        self.commands.forEach(function (extension) {\n\t                            if (extension.options.key && extension.options.key === key) {\n\t                                extension.handleClick(e);\n\t                            }\n\t                        });\n\t                    }\n\t                });\n\t                return this;\n\t            },\n\t\n\t            onBlockModifier: function (e) {\n\t                var range,\n\t                    sel,\n\t                    p,\n\t                    node = Selection.getSelectionStart(this.options.ownerDocument),\n\t                    tagName = node.tagName.toLowerCase(),\n\t                    isEmpty = /^(\\s+|<br\\/?>)?$/i,\n\t                    isHeader = /h\\d/i;\n\t\n\t                if ((e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.ENTER) && node.previousElementSibling\n\t                // in a header\n\t                 && isHeader.test(tagName)\n\t                // at the very end of the block\n\t                 && Selection.getCaretOffsets(node).left === 0) {\n\t                    if (e.which === Util.keyCode.BACKSPACE && isEmpty.test(node.previousElementSibling.innerHTML)) {\n\t                        // backspacing the begining of a header into an empty previous element will\n\t                        // change the tagName of the current node to prevent one\n\t                        // instead delete previous node and cancel the event.\n\t                        node.previousElementSibling.parentNode.removeChild(node.previousElementSibling);\n\t                        e.preventDefault();\n\t                    } else if (e.which === Util.keyCode.ENTER) {\n\t                        // hitting return in the begining of a header will create empty header elements before the current one\n\t                        // instead, make \"<p><br></p>\" element, which are what happens if you hit return in an empty paragraph\n\t                        p = this.options.ownerDocument.createElement(\"p\");\n\t                        p.innerHTML = \"<br>\";\n\t                        node.previousElementSibling.parentNode.insertBefore(p, node);\n\t                        e.preventDefault();\n\t                    }\n\t                } else if (e.which === Util.keyCode.DELETE && node.nextElementSibling && node.previousElementSibling\n\t                // not in a header\n\t                 && !isHeader.test(tagName)\n\t                // in an empty tag\n\t                 && isEmpty.test(node.innerHTML)\n\t                // when the next tag *is* a header\n\t                 && isHeader.test(node.nextElementSibling.tagName)) {\n\t                    // hitting delete in an empty element preceding a header, ex:\n\t                    //  <p>[CURSOR]</p><h1>Header</h1>\n\t                    // Will cause the h1 to become a paragraph.\n\t                    // Instead, delete the paragraph node and move the cursor to the begining of the h1\n\t\n\t                    // remove node and move cursor to start of header\n\t                    range = document.createRange();\n\t                    sel = window.getSelection();\n\t\n\t                    range.setStart(node.nextElementSibling, 0);\n\t                    range.collapse(true);\n\t\n\t                    sel.removeAllRanges();\n\t                    sel.addRange(range);\n\t\n\t                    node.previousElementSibling.parentNode.removeChild(node);\n\t\n\t                    e.preventDefault();\n\t                }\n\t            },\n\t\n\t            initToolbar: function () {\n\t                if (this.toolbar) {\n\t                    return this;\n\t                }\n\t                this.toolbar = this.createToolbar();\n\t                this.keepToolbarAlive = false;\n\t                this.toolbarActions = this.toolbar.querySelector(\".medium-editor-toolbar-actions\");\n\t                this.anchorPreview = this.createAnchorPreview();\n\t\n\t                return this;\n\t            },\n\t\n\t            createToolbar: function () {\n\t                var toolbar = this.options.ownerDocument.createElement(\"div\");\n\t                toolbar.id = \"medium-editor-toolbar-\" + this.id;\n\t                toolbar.className = \"medium-editor-toolbar\";\n\t\n\t                if (this.options.staticToolbar) {\n\t                    toolbar.className += \" static-toolbar\";\n\t                } else {\n\t                    toolbar.className += \" stalker-toolbar\";\n\t                }\n\t\n\t                toolbar.appendChild(this.toolbarButtons());\n\t\n\t                // Add any forms that extensions may have\n\t                this.commands.forEach(function (extension) {\n\t                    if (extension.hasForm) {\n\t                        toolbar.appendChild(extension.getForm());\n\t                    }\n\t                });\n\t\n\t                this.options.elementsContainer.appendChild(toolbar);\n\t                return toolbar;\n\t            },\n\t\n\t            //TODO: actionTemplate\n\t            toolbarButtons: function () {\n\t                var ul = this.options.ownerDocument.createElement(\"ul\"),\n\t                    li,\n\t                    btn;\n\t\n\t                ul.id = \"medium-editor-toolbar-actions\" + this.id;\n\t                ul.className = \"medium-editor-toolbar-actions clearfix\";\n\t\n\t                this.commands.forEach((function (extension) {\n\t                    if (typeof extension.getButton === \"function\") {\n\t                        btn = extension.getButton(this);\n\t                        li = this.options.ownerDocument.createElement(\"li\");\n\t                        if (Util.isElement(btn)) {\n\t                            li.appendChild(btn);\n\t                        } else {\n\t                            li.innerHTML = btn;\n\t                        }\n\t                        ul.appendChild(li);\n\t                    }\n\t                }).bind(this));\n\t\n\t                return ul;\n\t            },\n\t\n\t            bindSelect: function () {\n\t                var i,\n\t                    blurHelper = (function (event) {\n\t                    // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n\t                    if (event && event.type && event.type.toLowerCase() === \"blur\" && event.relatedTarget && Util.isDescendant(this.toolbar, event.relatedTarget)) {\n\t                        return false;\n\t                    }\n\t                    this.checkSelection();\n\t                }).bind(this),\n\t                    timeoutHelper = (function () {\n\t                    setTimeout((function () {\n\t                        this.checkSelection();\n\t                    }).bind(this), 0);\n\t                }).bind(this);\n\t\n\t                this.on(this.options.ownerDocument.documentElement, \"mouseup\", this.checkSelection.bind(this));\n\t\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.on(this.elements[i], \"keyup\", this.checkSelection.bind(this));\n\t                    this.on(this.elements[i], \"blur\", blurHelper);\n\t                    this.on(this.elements[i], \"click\", timeoutHelper);\n\t                }\n\t\n\t                return this;\n\t            },\n\t\n\t            bindDragDrop: function () {\n\t                var self = this,\n\t                    i,\n\t                    className,\n\t                    onDrag,\n\t                    onDrop,\n\t                    element;\n\t\n\t                if (!self.options.imageDragging) {\n\t                    return this;\n\t                }\n\t\n\t                className = \"medium-editor-dragover\";\n\t\n\t                onDrag = function (e) {\n\t                    e.preventDefault();\n\t                    e.dataTransfer.dropEffect = \"copy\";\n\t\n\t                    if (e.type === \"dragover\") {\n\t                        this.classList.add(className);\n\t                    } else {\n\t                        this.classList.remove(className);\n\t                    }\n\t                };\n\t\n\t                onDrop = function (e) {\n\t                    var files;\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\t                    files = Array.prototype.slice.call(e.dataTransfer.files, 0);\n\t                    files.some(function (file) {\n\t                        if (file.type.match(\"image\")) {\n\t                            var fileReader, id;\n\t                            fileReader = new FileReader();\n\t                            fileReader.readAsDataURL(file);\n\t\n\t                            id = \"medium-img-\" + +new Date();\n\t                            Util.insertHTMLCommand(self.options.ownerDocument, \"<img class=\\\"medium-image-loading\\\" id=\\\"\" + id + \"\\\" />\");\n\t\n\t                            fileReader.onload = function () {\n\t                                var img = document.getElementById(id);\n\t                                if (img) {\n\t                                    img.removeAttribute(\"id\");\n\t                                    img.removeAttribute(\"class\");\n\t                                    img.src = fileReader.result;\n\t                                }\n\t                            };\n\t                        }\n\t                    });\n\t                    this.classList.remove(className);\n\t                };\n\t\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    element = this.elements[i];\n\t\n\t\n\t                    this.on(element, \"dragover\", onDrag);\n\t                    this.on(element, \"dragleave\", onDrag);\n\t                    this.on(element, \"drop\", onDrop);\n\t                }\n\t                return this;\n\t            },\n\t\n\t            stopSelectionUpdates: function () {\n\t                this.preventSelectionUpdates = true;\n\t            },\n\t\n\t            startSelectionUpdates: function () {\n\t                this.preventSelectionUpdates = false;\n\t            },\n\t\n\t            checkSelection: function () {\n\t                var newSelection, selectionElement;\n\t\n\t                if (!this.preventSelectionUpdates && this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n\t                    newSelection = this.options.contentWindow.getSelection();\n\t                    if (!this.options.updateOnEmptySelection && newSelection.toString().trim() === \"\" || this.options.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected() || Selection.selectionInContentEditableFalse(this.options.contentWindow)) {\n\t                        if (!this.options.staticToolbar) {\n\t                            this.hideToolbarActions();\n\t                        } else {\n\t                            this.showAndUpdateToolbar();\n\t                        }\n\t                    } else {\n\t                        selectionElement = Selection.getSelectionElement(this.options.contentWindow);\n\t                        if (!selectionElement || selectionElement.getAttribute(\"data-disable-toolbar\")) {\n\t                            if (!this.options.staticToolbar) {\n\t                                this.hideToolbarActions();\n\t                            }\n\t                        } else {\n\t                            this.checkSelectionElement(newSelection, selectionElement);\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            },\n\t\n\t            // Checks for existance of multiple block elements in the current selection\n\t            multipleBlockElementsSelected: function () {\n\t                /*jslint regexp: true*/\n\t                var selectionHtml = Selection.getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, \"\"),\n\t                    hasMultiParagraphs = selectionHtml.match(/<(p|h[1-6]|blockquote)[^>]*>/g);\n\t                /*jslint regexp: false*/\n\t\n\t                return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\n\t            },\n\t\n\t            checkSelectionElement: function (newSelection, selectionElement) {\n\t                var i,\n\t                    adjacentNode,\n\t                    offset = 0,\n\t                    newRange;\n\t                this.selection = newSelection;\n\t                this.selectionRange = this.selection.getRangeAt(0);\n\t\n\t                /*\n\t                * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\n\t                * will be at the very end of an element.  In other browsers, the selectionRange start\n\t                * would instead be at the very beginning of an element that actually has content.\n\t                * example:\n\t                *   <span>foo</span><span>bar</span>\n\t                *\n\t                * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\n\t                * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\n\t                * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\n\t                * properties on the 'bar' span, they won't be reflected accurately in the toolbar\n\t                * (ie 'Bold' button wouldn't be active)\n\t                *\n\t                * So, for cases where the selectionRange start is at the end of an element/node, find the next\n\t                * adjacent text node that actually has content in it, and move the selectionRange start there.\n\t                */\n\t                if (this.options.standardizeSelectionStart && this.selectionRange.startContainer.nodeValue && this.selectionRange.startOffset === this.selectionRange.startContainer.nodeValue.length) {\n\t                    adjacentNode = Util.findAdjacentTextNodeWithContent(Selection.getSelectionElement(this.options.contentWindow), this.selectionRange.startContainer, this.options.ownerDocument);\n\t                    if (adjacentNode) {\n\t                        offset = 0;\n\t                        while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\n\t                            offset = offset + 1;\n\t                        }\n\t                        newRange = this.options.ownerDocument.createRange();\n\t                        newRange.setStart(adjacentNode, offset);\n\t                        newRange.setEnd(this.selectionRange.endContainer, this.selectionRange.endOffset);\n\t                        this.selection.removeAllRanges();\n\t                        this.selection.addRange(newRange);\n\t                        this.selectionRange = newRange;\n\t                    }\n\t                }\n\t\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    if (this.elements[i] === selectionElement) {\n\t                        this.showAndUpdateToolbar();\n\t                        return;\n\t                    }\n\t                }\n\t\n\t                if (!this.options.staticToolbar) {\n\t                    this.hideToolbarActions();\n\t                }\n\t            },\n\t\n\t            showAndUpdateToolbar: function () {\n\t                this.setToolbarButtonStates().setToolbarPosition().showToolbarDefaultActions();\n\t            },\n\t\n\t            setToolbarPosition: function () {\n\t                // document.documentElement for IE 9\n\t                var scrollTop = this.options.ownerDocument.documentElement && this.options.ownerDocument.documentElement.scrollTop || this.options.ownerDocument.body.scrollTop,\n\t                    selection = this.options.contentWindow.getSelection(),\n\t                    windowWidth = this.options.contentWindow.innerWidth,\n\t                    container = Selection.getSelectionElement(this.options.contentWindow),\n\t                    buttonHeight = 50,\n\t                    toolbarWidth,\n\t                    toolbarHeight,\n\t                    halfOffsetWidth,\n\t                    defaultLeft,\n\t                    containerRect,\n\t                    containerTop,\n\t                    containerCenter,\n\t                    range,\n\t                    boundary,\n\t                    middleBoundary,\n\t                    targetLeft;\n\t\n\t                // If there isn't a valid selection, bail\n\t                if (!container || !this.options.contentWindow.getSelection().focusNode) {\n\t                    return this;\n\t                }\n\t\n\t                // If the container isn't part of this medium-editor instance, bail\n\t                if (this.elements.indexOf(container) === -1) {\n\t                    return this;\n\t                }\n\t\n\t                // Calculate container dimensions\n\t                containerRect = container.getBoundingClientRect();\n\t                containerTop = containerRect.top + scrollTop;\n\t                containerCenter = containerRect.left + containerRect.width / 2;\n\t\n\t                // position the toolbar at left 0, so we can get the real width of the toolbar\n\t                this.toolbar.style.left = \"0\";\n\t                toolbarWidth = this.toolbar.offsetWidth;\n\t                toolbarHeight = this.toolbar.offsetHeight;\n\t                halfOffsetWidth = toolbarWidth / 2;\n\t                defaultLeft = this.options.diffLeft - halfOffsetWidth;\n\t\n\t                if (this.options.staticToolbar) {\n\t                    this.showToolbar();\n\t\n\t                    if (this.options.stickyToolbar) {\n\t                        // If it's beyond the height of the editor, position it at the bottom of the editor\n\t                        if (scrollTop > containerTop + container.offsetHeight - toolbarHeight) {\n\t                            this.toolbar.style.top = containerTop + container.offsetHeight - toolbarHeight + \"px\";\n\t                            this.toolbar.classList.remove(\"sticky-toolbar\");\n\t\n\t                            // Stick the toolbar to the top of the window\n\t                        } else if (scrollTop > containerTop - toolbarHeight) {\n\t                            this.toolbar.classList.add(\"sticky-toolbar\");\n\t                            this.toolbar.style.top = \"0px\";\n\t\n\t                            // Normal static toolbar position\n\t                        } else {\n\t                            this.toolbar.classList.remove(\"sticky-toolbar\");\n\t                            this.toolbar.style.top = containerTop - toolbarHeight + \"px\";\n\t                        }\n\t                    } else {\n\t                        this.toolbar.style.top = containerTop - toolbarHeight + \"px\";\n\t                    }\n\t\n\t                    if (this.options.toolbarAlign === \"left\") {\n\t                        targetLeft = containerRect.left;\n\t                    } else if (this.options.toolbarAlign === \"center\") {\n\t                        targetLeft = containerCenter - halfOffsetWidth;\n\t                    } else if (this.options.toolbarAlign === \"right\") {\n\t                        targetLeft = containerRect.right - toolbarWidth;\n\t                    }\n\t\n\t                    if (targetLeft < 0) {\n\t                        targetLeft = 0;\n\t                    } else if (targetLeft + toolbarWidth > windowWidth) {\n\t                        targetLeft = windowWidth - toolbarWidth;\n\t                    }\n\t\n\t                    this.toolbar.style.left = targetLeft + \"px\";\n\t                } else if (!selection.isCollapsed) {\n\t                    this.showToolbar();\n\t\n\t                    range = selection.getRangeAt(0);\n\t                    boundary = range.getBoundingClientRect();\n\t                    middleBoundary = (boundary.left + boundary.right) / 2;\n\t\n\t                    if (boundary.top < buttonHeight) {\n\t                        this.toolbar.classList.add(\"medium-toolbar-arrow-over\");\n\t                        this.toolbar.classList.remove(\"medium-toolbar-arrow-under\");\n\t                        this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + \"px\";\n\t                    } else {\n\t                        this.toolbar.classList.add(\"medium-toolbar-arrow-under\");\n\t                        this.toolbar.classList.remove(\"medium-toolbar-arrow-over\");\n\t                        this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + \"px\";\n\t                    }\n\t                    if (middleBoundary < halfOffsetWidth) {\n\t                        this.toolbar.style.left = defaultLeft + halfOffsetWidth + \"px\";\n\t                    } else if (windowWidth - middleBoundary < halfOffsetWidth) {\n\t                        this.toolbar.style.left = windowWidth + defaultLeft - halfOffsetWidth + \"px\";\n\t                    } else {\n\t                        this.toolbar.style.left = defaultLeft + middleBoundary + \"px\";\n\t                    }\n\t                }\n\t\n\t                this.hideAnchorPreview();\n\t\n\t                return this;\n\t            },\n\t\n\t            setToolbarButtonStates: function () {\n\t                this.commands.forEach((function (extension) {\n\t                    if (typeof extension.isActive === \"function\") {\n\t                        extension.setInactive();\n\t                    }\n\t                }).bind(this));\n\t                this.checkActiveButtons();\n\t                return this;\n\t            },\n\t\n\t            checkActiveButtons: function () {\n\t                var elements = Array.prototype.slice.call(this.elements),\n\t                    manualStateChecks = [],\n\t                    queryState = null,\n\t                    parentNode,\n\t                    checkExtension = function (extension) {\n\t                    if (typeof extension.checkState === \"function\") {\n\t                        extension.checkState(parentNode);\n\t                    } else if (typeof extension.isActive === \"function\" && typeof extension.isAlreadyApplied === \"function\") {\n\t                        if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\n\t                            extension.setActive();\n\t                        }\n\t                    }\n\t                };\n\t\n\t                if (!this.selectionRange) {\n\t                    return;\n\t                }\n\t                parentNode = Selection.getSelectedParentElement(this.selectionRange);\n\t\n\t                // Loop through all commands\n\t                this.commands.forEach(function (command) {\n\t                    // For those commands where we can use document.queryCommandState(), do so\n\t                    if (typeof command.queryCommandState === \"function\") {\n\t                        queryState = command.queryCommandState();\n\t                        // If queryCommandState returns a valid value, we can trust the browser\n\t                        // and don't need to do our manual checks\n\t                        if (queryState !== null) {\n\t                            if (queryState) {\n\t                                command.setActive();\n\t                            }\n\t                            return;\n\t                        }\n\t                    }\n\t                    // We can't use queryCommandState for this command, so add to manualStateChecks\n\t                    manualStateChecks.push(command);\n\t                });\n\t\n\t                // Climb up the DOM and do manual checks for whether a certain command is currently enabled for this node\n\t                while (parentNode.tagName !== undefined && Util.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n\t                    manualStateChecks.forEach(checkExtension.bind(this));\n\t\n\t                    // we can abort the search upwards if we leave the contentEditable element\n\t                    if (elements.indexOf(parentNode) !== -1) {\n\t                        break;\n\t                    }\n\t                    parentNode = parentNode.parentNode;\n\t                }\n\t            },\n\t\n\t            setFirstAndLastButtons: function () {\n\t                var buttons = this.toolbar.querySelectorAll(\"button\");\n\t                if (buttons.length > 0) {\n\t                    buttons[0].className += \" \" + this.options.firstButtonClass;\n\t                    buttons[buttons.length - 1].className += \" \" + this.options.lastButtonClass;\n\t                }\n\t                return this;\n\t            },\n\t\n\t            // Wrapper around document.queryCommandState for checking whether an action has already\n\t            // been applied to the current selection\n\t            queryCommandState: function (action) {\n\t                var fullAction = /^full-(.+)$/gi,\n\t                    match,\n\t                    queryState = null;\n\t\n\t                // Actions starting with 'full-' need to be modified since this is a medium-editor concept\n\t                match = fullAction.exec(action);\n\t                if (match) {\n\t                    action = match[1];\n\t                }\n\t\n\t                try {\n\t                    queryState = this.options.ownerDocument.queryCommandState(action);\n\t                } catch (exc) {\n\t                    queryState = null;\n\t                }\n\t\n\t                return queryState;\n\t            },\n\t\n\t            execAction: function (action, opts) {\n\t                /*jslint regexp: true*/\n\t                var fullAction = /^full-(.+)$/gi,\n\t                    match,\n\t                    result;\n\t                /*jslint regexp: false*/\n\t\n\t                // Actions starting with 'full-' should be applied to to the entire contents of the editable element\n\t                // (ie full-bold, full-append-pre, etc.)\n\t                match = fullAction.exec(action);\n\t                if (match) {\n\t                    // Store the current selection to be restored after applying the action\n\t                    this.saveSelection();\n\t                    // Select all of the contents before calling the action\n\t                    this.selectAllContents();\n\t                    result = this.execActionInternal(match[1], opts);\n\t                    // Restore the previous selection\n\t                    this.restoreSelection();\n\t                } else {\n\t                    result = this.execActionInternal(action, opts);\n\t                }\n\t\n\t                this.checkSelection();\n\t                return result;\n\t            },\n\t\n\t            execActionInternal: function (action, opts) {\n\t                /*jslint regexp: true*/\n\t                var appendAction = /^append-(.+)$/gi,\n\t                    match;\n\t                /*jslint regexp: false*/\n\t\n\t                // Actions starting with 'append-' should attempt to format a block of text ('formatBlock') using a specific\n\t                // type of block element (ie append-blockquote, append-h1, append-pre, etc.)\n\t                match = appendAction.exec(action);\n\t                if (match) {\n\t                    return this.execFormatBlock(match[1]);\n\t                }\n\t\n\t                if (action === \"createLink\") {\n\t                    return this.createLink(opts);\n\t                }\n\t\n\t                if (action === \"image\") {\n\t                    return this.options.ownerDocument.execCommand(\"insertImage\", false, this.options.contentWindow.getSelection());\n\t                }\n\t\n\t                return this.options.ownerDocument.execCommand(action, false, null);\n\t            },\n\t\n\t            // TODO: move these two methods to selection.js\n\t            // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n\t            rangeSelectsSingleNode: function (range) {\n\t                var startNode = range.startContainer;\n\t                return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n\t            },\n\t\n\t            getSelectedParentElement: function () {\n\t                var selectedParentElement = null,\n\t                    range = this.selectionRange;\n\t                if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n\t                    selectedParentElement = range.startContainer.childNodes[range.startOffset];\n\t                } else if (range.startContainer.nodeType === 3) {\n\t                    selectedParentElement = range.startContainer.parentNode;\n\t                } else {\n\t                    selectedParentElement = range.startContainer;\n\t                }\n\t                return selectedParentElement;\n\t            },\n\t\n\t            execFormatBlock: function (el) {\n\t                var selectionData = Selection.getSelectionData(this.selection.anchorNode);\n\t                // FF handles blockquote differently on formatBlock\n\t                // allowing nesting, we need to use outdent\n\t                // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n\t                if (el === \"blockquote\" && selectionData.el && selectionData.el.parentNode.tagName.toLowerCase() === \"blockquote\") {\n\t                    return this.options.ownerDocument.execCommand(\"outdent\", false, null);\n\t                }\n\t                if (selectionData.tagName === el) {\n\t                    el = \"p\";\n\t                }\n\t                // When IE we need to add <> to heading elements and\n\t                //  blockquote needs to be called as indent\n\t                // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n\t                // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n\t                if (Util.isIE) {\n\t                    if (el === \"blockquote\") {\n\t                        return this.options.ownerDocument.execCommand(\"indent\", false, el);\n\t                    }\n\t                    el = \"<\" + el + \">\";\n\t                }\n\t                return this.options.ownerDocument.execCommand(\"formatBlock\", false, el);\n\t            },\n\t\n\t            isToolbarDefaultActionsShown: function () {\n\t                return !!this.toolbarActions && this.toolbarActions.style.display === \"block\";\n\t            },\n\t\n\t            hideToolbarDefaultActions: function () {\n\t                if (this.toolbarActions && this.isToolbarDefaultActionsShown()) {\n\t                    this.commands.forEach(function (extension) {\n\t                        if (extension.onHide && typeof extension.onHide === \"function\") {\n\t                            extension.onHide();\n\t                        }\n\t                    });\n\t                    this.toolbarActions.style.display = \"none\";\n\t                }\n\t            },\n\t\n\t            showToolbarDefaultActions: function () {\n\t                this.hideExtensionForms();\n\t\n\t                if (this.toolbarActions && !this.isToolbarDefaultActionsShown()) {\n\t                    this.toolbarActions.style.display = \"block\";\n\t                }\n\t\n\t                this.keepToolbarAlive = false;\n\t                // Using setTimeout + options.delay because:\n\t                // We will actually be displaying the toolbar, which should be controlled by options.delay\n\t                this.delay((function () {\n\t                    this.showToolbar();\n\t                }).bind(this));\n\t\n\t                return this;\n\t            },\n\t\n\t            hideExtensionForms: function () {\n\t                // Hide all extension forms\n\t                this.commands.forEach(function (extension) {\n\t                    if (extension.hasForm && extension.isDisplayed()) {\n\t                        extension.hideForm();\n\t                    }\n\t                });\n\t            },\n\t\n\t            isToolbarShown: function () {\n\t                return this.toolbar && this.toolbar.classList.contains(\"medium-editor-toolbar-active\");\n\t            },\n\t\n\t            showToolbar: function () {\n\t                if (this.toolbar && !this.isToolbarShown()) {\n\t                    this.toolbar.classList.add(\"medium-editor-toolbar-active\");\n\t                    if (typeof this.options.onShowToolbar === \"function\") {\n\t                        this.options.onShowToolbar();\n\t                    }\n\t                }\n\t            },\n\t\n\t            hideToolbar: function () {\n\t                if (this.isToolbarShown()) {\n\t                    this.toolbar.classList.remove(\"medium-editor-toolbar-active\");\n\t                    if (typeof this.options.onHideToolbar === \"function\") {\n\t                        this.options.onHideToolbar();\n\t                    }\n\t                }\n\t            },\n\t\n\t            hideToolbarActions: function () {\n\t                this.commands.forEach(function (extension) {\n\t                    if (extension.onHide && typeof extension.onHide === \"function\") {\n\t                        extension.onHide();\n\t                    }\n\t                });\n\t                this.keepToolbarAlive = false;\n\t                this.hideToolbar();\n\t            },\n\t\n\t            selectAllContents: function () {\n\t                var range = this.options.ownerDocument.createRange(),\n\t                    sel = this.options.contentWindow.getSelection(),\n\t                    currNode = Selection.getSelectionElement(this.options.contentWindow);\n\t\n\t                if (currNode) {\n\t                    // Move to the lowest descendant node that still selects all of the contents\n\t                    while (currNode.children.length === 1) {\n\t                        currNode = currNode.children[0];\n\t                    }\n\t\n\t                    range.selectNodeContents(currNode);\n\t                    sel.removeAllRanges();\n\t                    sel.addRange(range);\n\t                }\n\t            },\n\t\n\t            // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n\t            // Tim Down\n\t            // TODO: move to selection.js and clean up old methods there\n\t            saveSelection: function () {\n\t                this.selectionState = null;\n\t\n\t                var selection = this.options.contentWindow.getSelection(),\n\t                    range,\n\t                    preSelectionRange,\n\t                    start,\n\t                    editableElementIndex = -1;\n\t\n\t                if (selection.rangeCount > 0) {\n\t                    range = selection.getRangeAt(0);\n\t                    preSelectionRange = range.cloneRange();\n\t\n\t                    // Find element current selection is inside\n\t                    this.elements.forEach(function (el, index) {\n\t                        if (el === range.startContainer || Util.isDescendant(el, range.startContainer)) {\n\t                            editableElementIndex = index;\n\t                            return false;\n\t                        }\n\t                    });\n\t\n\t                    if (editableElementIndex > -1) {\n\t                        preSelectionRange.selectNodeContents(this.elements[editableElementIndex]);\n\t                        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n\t                        start = preSelectionRange.toString().length;\n\t\n\t                        this.selectionState = {\n\t                            start: start,\n\t                            end: start + range.toString().length,\n\t                            editableElementIndex: editableElementIndex\n\t                        };\n\t                    }\n\t                }\n\t            },\n\t\n\t            // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n\t            // Tim Down\n\t            // TODO: move to selection.js and clean up old methods there\n\t            restoreSelection: function () {\n\t                if (!this.selectionState) {\n\t                    return;\n\t                }\n\t\n\t                var editableElement = this.elements[this.selectionState.editableElementIndex],\n\t                    charIndex = 0,\n\t                    range = this.options.ownerDocument.createRange(),\n\t                    nodeStack = [editableElement],\n\t                    node,\n\t                    foundStart = false,\n\t                    stop = false,\n\t                    i,\n\t                    sel,\n\t                    nextCharIndex;\n\t\n\t                range.setStart(editableElement, 0);\n\t                range.collapse(true);\n\t\n\t                node = nodeStack.pop();\n\t                while (!stop && node) {\n\t                    if (node.nodeType === 3) {\n\t                        nextCharIndex = charIndex + node.length;\n\t                        if (!foundStart && this.selectionState.start >= charIndex && this.selectionState.start <= nextCharIndex) {\n\t                            range.setStart(node, this.selectionState.start - charIndex);\n\t                            foundStart = true;\n\t                        }\n\t                        if (foundStart && this.selectionState.end >= charIndex && this.selectionState.end <= nextCharIndex) {\n\t                            range.setEnd(node, this.selectionState.end - charIndex);\n\t                            stop = true;\n\t                        }\n\t                        charIndex = nextCharIndex;\n\t                    } else {\n\t                        i = node.childNodes.length - 1;\n\t                        while (i >= 0) {\n\t                            nodeStack.push(node.childNodes[i]);\n\t                            i -= 1;\n\t                        }\n\t                    }\n\t                    if (!stop) {\n\t                        node = nodeStack.pop();\n\t                    }\n\t                }\n\t\n\t                sel = this.options.contentWindow.getSelection();\n\t                sel.removeAllRanges();\n\t                sel.addRange(range);\n\t            },\n\t\n\t            hideAnchorPreview: function () {\n\t                this.anchorPreview.classList.remove(\"medium-editor-anchor-preview-active\");\n\t            },\n\t\n\t            // TODO: break method\n\t            showAnchorPreview: function (anchorEl) {\n\t                if (this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\") || anchorEl.getAttribute(\"data-disable-preview\")) {\n\t                    return true;\n\t                }\n\t\n\t                var self = this,\n\t                    buttonHeight = 40,\n\t                    boundary = anchorEl.getBoundingClientRect(),\n\t                    middleBoundary = (boundary.left + boundary.right) / 2,\n\t                    halfOffsetWidth,\n\t                    defaultLeft;\n\t\n\t                self.anchorPreview.querySelector(\"i\").textContent = anchorEl.attributes.href.value;\n\t                halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n\t                defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\t\n\t                self.observeAnchorPreview(anchorEl);\n\t\n\t                self.anchorPreview.classList.add(\"medium-toolbar-arrow-over\");\n\t                self.anchorPreview.classList.remove(\"medium-toolbar-arrow-under\");\n\t                self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + \"px\";\n\t                if (middleBoundary < halfOffsetWidth) {\n\t                    self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + \"px\";\n\t                } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n\t                    self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n\t                } else {\n\t                    self.anchorPreview.style.left = defaultLeft + middleBoundary + \"px\";\n\t                }\n\t\n\t                if (this.anchorPreview && !this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\")) {\n\t                    this.anchorPreview.classList.add(\"medium-editor-anchor-preview-active\");\n\t                }\n\t\n\t                return this;\n\t            },\n\t\n\t            // TODO: break method\n\t            observeAnchorPreview: function (anchorEl) {\n\t                var self = this,\n\t                    lastOver = new Date().getTime(),\n\t                    over = true,\n\t                    stamp = function () {\n\t                    lastOver = new Date().getTime();\n\t                    over = true;\n\t                },\n\t                    unstamp = function (e) {\n\t                    if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n\t                        over = false;\n\t                    }\n\t                },\n\t                    interval_timer = setInterval(function () {\n\t                    if (over) {\n\t                        return true;\n\t                    }\n\t                    var durr = new Date().getTime() - lastOver;\n\t                    if (durr > self.options.anchorPreviewHideDelay) {\n\t                        // hide the preview 1/2 second after mouse leaves the link\n\t                        self.hideAnchorPreview();\n\t\n\t                        // cleanup\n\t                        clearInterval(interval_timer);\n\t                        self.off(self.anchorPreview, \"mouseover\", stamp);\n\t                        self.off(self.anchorPreview, \"mouseout\", unstamp);\n\t                        self.off(anchorEl, \"mouseover\", stamp);\n\t                        self.off(anchorEl, \"mouseout\", unstamp);\n\t                    }\n\t                }, 200);\n\t\n\t                this.on(self.anchorPreview, \"mouseover\", stamp);\n\t                this.on(self.anchorPreview, \"mouseout\", unstamp);\n\t                this.on(anchorEl, \"mouseover\", stamp);\n\t                this.on(anchorEl, \"mouseout\", unstamp);\n\t            },\n\t\n\t            createAnchorPreview: function () {\n\t                var self = this,\n\t                    anchorPreview = this.options.ownerDocument.createElement(\"div\");\n\t\n\t                anchorPreview.id = \"medium-editor-anchor-preview-\" + this.id;\n\t                anchorPreview.className = \"medium-editor-anchor-preview\";\n\t                anchorPreview.innerHTML = this.anchorPreviewTemplate();\n\t                this.options.elementsContainer.appendChild(anchorPreview);\n\t\n\t                this.on(anchorPreview, \"click\", function () {\n\t                    self.anchorPreviewClickHandler();\n\t                });\n\t\n\t                return anchorPreview;\n\t            },\n\t\n\t            anchorPreviewTemplate: function () {\n\t                return \"<div class=\\\"medium-editor-toolbar-anchor-preview\\\" id=\\\"medium-editor-toolbar-anchor-preview\\\">\" + \"    <i class=\\\"medium-editor-toolbar-anchor-preview-inner\\\"></i>\" + \"</div>\";\n\t            },\n\t\n\t            anchorPreviewClickHandler: function (event) {\n\t                var range,\n\t                    sel,\n\t                    anchorExtension = this.getExtensionByName(\"anchor\");\n\t\n\t                if (anchorExtension && this.activeAnchor) {\n\t                    range = this.options.ownerDocument.createRange();\n\t                    range.selectNodeContents(this.activeAnchor);\n\t\n\t                    sel = this.options.contentWindow.getSelection();\n\t                    sel.removeAllRanges();\n\t                    sel.addRange(range);\n\t                    // Using setTimeout + options.delay because:\n\t                    // We may actually be displaying the anchor form, which should be controlled by options.delay\n\t                    this.delay((function () {\n\t                        if (this.activeAnchor) {\n\t                            anchorExtension.showForm(this.activeAnchor.attributes.href.value);\n\t                        }\n\t                        this.keepToolbarAlive = false;\n\t                    }).bind(this));\n\t                }\n\t\n\t                this.hideAnchorPreview();\n\t            },\n\t\n\t            editorAnchorObserver: function (e) {\n\t                var self = this,\n\t                    overAnchor = true,\n\t                    leaveAnchor = function () {\n\t                    // mark the anchor as no longer hovered, and stop listening\n\t                    overAnchor = false;\n\t                    self.off(self.activeAnchor, \"mouseout\", leaveAnchor);\n\t                };\n\t\n\t                if (e.target && e.target.tagName.toLowerCase() === \"a\") {\n\t                    // Detect empty href attributes\n\t                    // The browser will make href=\"\" or href=\"#top\"\n\t                    // into absolute urls when accessed as e.targed.href, so check the html\n\t                    if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n\t                        return true;\n\t                    }\n\t\n\t                    // only show when hovering on anchors\n\t                    if (this.isToolbarShown()) {\n\t                        // only show when toolbar is not present\n\t                        return true;\n\t                    }\n\t                    this.activeAnchor = e.target;\n\t                    this.on(this.activeAnchor, \"mouseout\", leaveAnchor);\n\t                    // Using setTimeout + options.delay because:\n\t                    // - We're going to show the anchor preview according to the configured delay\n\t                    //   if the mouse has not left the anchor tag in that time\n\t                    this.delay(function () {\n\t                        if (overAnchor) {\n\t                            self.showAnchorPreview(e.target);\n\t                        }\n\t                    });\n\t                }\n\t            },\n\t\n\t            bindAnchorPreview: function (index) {\n\t                var i,\n\t                    self = this;\n\t                this.editorAnchorObserverWrapper = function (e) {\n\t                    self.editorAnchorObserver(e);\n\t                };\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.on(this.elements[i], \"mouseover\", this.editorAnchorObserverWrapper);\n\t                }\n\t                return this;\n\t            },\n\t\n\t            createLink: function (opts) {\n\t                var customEvent, i;\n\t\n\t                if (opts.url && opts.url.trim().length > 0) {\n\t                    this.options.ownerDocument.execCommand(\"createLink\", false, opts.url);\n\t\n\t                    if (this.options.targetBlank || opts.target === \"_blank\") {\n\t                        Util.setTargetBlank(Selection.getSelectionStart(this.options.ownerDocument));\n\t                    }\n\t\n\t                    if (opts.buttonClass) {\n\t                        this.setButtonClass(opts.buttonClass);\n\t                    }\n\t                }\n\t\n\t                if (this.options.targetBlank || opts.target === \"_blank\" || opts.buttonClass) {\n\t                    customEvent = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n\t                    customEvent.initEvent(\"input\", true, true, this.options.contentWindow);\n\t                    for (i = 0; i < this.elements.length; i += 1) {\n\t                        this.elements[i].dispatchEvent(customEvent);\n\t                    }\n\t                }\n\t            },\n\t\n\t            setButtonClass: function (buttonClass) {\n\t                var el = Selection.getSelectionStart(this.options.ownerDocument),\n\t                    classes = buttonClass.split(\" \"),\n\t                    i,\n\t                    j;\n\t                if (el.tagName.toLowerCase() === \"a\") {\n\t                    for (j = 0; j < classes.length; j += 1) {\n\t                        el.classList.add(classes[j]);\n\t                    }\n\t                } else {\n\t                    el = el.getElementsByTagName(\"a\");\n\t                    for (i = 0; i < el.length; i += 1) {\n\t                        for (j = 0; j < classes.length; j += 1) {\n\t                            el[i].classList.add(classes[j]);\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t\n\t            positionToolbarIfShown: function () {\n\t                if (this.isToolbarShown()) {\n\t                    this.setToolbarPosition();\n\t                }\n\t            },\n\t\n\t            bindWindowActions: function () {\n\t                var self = this;\n\t\n\t                // Add a scroll event for sticky toolbar\n\t                if (this.options.staticToolbar && this.options.stickyToolbar) {\n\t                    // On scroll, re-position the toolbar\n\t                    this.on(this.options.contentWindow, \"scroll\", function () {\n\t                        self.positionToolbarIfShown();\n\t                    }, true);\n\t                }\n\t\n\t                this.on(this.options.contentWindow, \"resize\", function () {\n\t                    self.handleResize();\n\t                });\n\t\n\t                this.bindBlur();\n\t\n\t                return this;\n\t            },\n\t\n\t            activate: function () {\n\t                if (this.isActive) {\n\t                    return;\n\t                }\n\t\n\t                this.setup();\n\t            },\n\t\n\t            // TODO: break method\n\t            deactivate: function () {\n\t                var i;\n\t                if (!this.isActive) {\n\t                    return;\n\t                }\n\t                this.isActive = false;\n\t\n\t                if (this.toolbar !== undefined) {\n\t                    this.options.elementsContainer.removeChild(this.anchorPreview);\n\t                    this.options.elementsContainer.removeChild(this.toolbar);\n\t                    delete this.toolbar;\n\t                    delete this.anchorPreview;\n\t                }\n\t\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.elements[i].removeAttribute(\"contentEditable\");\n\t                    this.elements[i].removeAttribute(\"data-medium-element\");\n\t                }\n\t\n\t                this.commands.forEach((function (extension) {\n\t                    if (typeof extension.deactivate === \"function\") {\n\t                        extension.deactivate();\n\t                    }\n\t                }).bind(this));\n\t\n\t                this.removeAllEvents();\n\t            },\n\t\n\t            bindPaste: function () {\n\t                var i,\n\t                    self = this;\n\t                this.pasteWrapper = function (e) {\n\t                    pasteHandler.handlePaste(this, e, self.options);\n\t                };\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.on(this.elements[i], \"paste\", this.pasteWrapper);\n\t                }\n\t                return this;\n\t            },\n\t\n\t            setPlaceholders: function () {\n\t                if (!this.options.disablePlaceholders && this.elements && this.elements.length) {\n\t                    this.elements.forEach((function (el) {\n\t                        this.activatePlaceholder(el);\n\t                        this.on(el, \"blur\", this.placeholderWrapper.bind(this));\n\t                        this.on(el, \"keypress\", this.placeholderWrapper.bind(this));\n\t                    }).bind(this));\n\t                }\n\t\n\t                return this;\n\t            },\n\t\n\t            cleanPaste: function (text) {\n\t                pasteHandler.cleanPaste(text, this.options);\n\t            },\n\t\n\t            pasteHTML: function (html) {\n\t                pasteHandler.pasteHTML(html, this.options.ownerDocument);\n\t            }\n\t        };\n\t    })();\n\t\n\t    return MediumEditor;\n\t})());\n\n/***/ },\n\n/***/ 60:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n/******/ })\n\n\n/** WEBPACK FOOTER **\n ** addons/medium.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f6188d4bf81bf977ae00\n **/","\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * This component adds a medium.com-like rich text editor block type.\n *\n * Source for this component can be found here:\n * https://github.com/daviferreira/medium-editor\n */\n\nvar Editor = require(\"./editor\");\nvar Previewer = require(\"./previewer\");\nvar React = require(\"react\");\n\nrequire(\"./style\");\n\nvar Medium = {\n\n  defaultContent: function defaultContent() {\n    return { html: \"\", text: \"\" };\n  },\n\n  renderEditor: function renderEditor() {\n    return React.createElement(Editor, _extends({ onBlur: this.setContent }, this.state.content));\n  },\n\n  renderPreviewer: function renderPreviewer() {\n    return React.createElement(Previewer, this.state.content);\n  }\n\n};\n\nmodule.exports = Medium;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/index.js\n ** module id = 0\n ** module chunks = 3\n **/","module.exports = require(\"react\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 1\n ** module chunks = 0 1 2 3\n **/","\"use strict\";\n\nvar MediumEditor = require(\"./vendor/medium-editor\");\nvar React = require(\"react\");\nvar Types = React.PropTypes;\n\nvar Editor = React.createClass({\n  displayName: \"Editor\",\n\n\n  propTypes: {\n    html: Types.string.isRequired,\n    onBlur: Types.func.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      options: {\n        buttons: [\"header1\", \"header2\", \"bold\", \"italic\", \"underline\", \"anchor\", \"quote\", \"unorderedlist\", \"orderedlist\"],\n        firstHeader: \"h1\",\n        secondHeader: \"h2\",\n        diffLeft: 0,\n        diffTop: -10,\n        disableDoubleReturn: true\n      }\n    };\n  },\n\n  shouldComponentUpdate: function shouldComponentUpdate(props, state) {\n    return false;\n  },\n\n  componentDidMount: function componentDidMount() {\n    this.setState({\n      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n    });\n  },\n\n  componentWillUnmount: function componentWillUnmount() {\n    this.state.editor.deactivate();\n  },\n\n  render: function render() {\n    return React.createElement(\n      \"div\",\n      { className: \"col-block-medium\" },\n      React.createElement(\"div\", { className: \"col-medium\", onBlur: this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html } })\n    );\n  },\n\n  _onBlur: function _onBlur() {\n    var editor = this.refs.editor.getDOMNode();\n\n    this.props.onBlur({\n      text: editor.textContent,\n      html: editor.innerHTML\n    });\n  }\n\n});\n\nmodule.exports = Editor;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/editor.js\n ** module id = 32\n ** module chunks = 3\n **/","\"use strict\";\n\nvar React = require(\"react\");\n\nvar Previewer = React.createClass({\n  displayName: \"Previewer\",\n\n\n  render: function render() {\n    return React.createElement(\n      \"div\",\n      { className: \"col-block-content\" },\n      React.createElement(\"div\", { className: \"col-medium-preview\", dangerouslySetInnerHTML: { __html: this.props.html } })\n    );\n  }\n\n});\n\nmodule.exports = Previewer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/previewer.js\n ** module id = 33\n ** module chunks = 3\n **/","\"use strict\";\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\n// Full polyfill for browsers with no classList support\nif (!(\"classList\" in document.createElement(\"_\"))) {\n    (function (view) {\n        \"use strict\";\n\n        if (!(\"Element\" in view)) return;\n\n        var classListProp = \"classList\",\n            protoProp = \"prototype\",\n            elemCtrProto = view.Element[protoProp],\n            objCtr = Object,\n            strTrim = String[protoProp].trim || function () {\n            return this.replace(/^\\s+|\\s+$/g, \"\");\n        },\n            arrIndexOf = Array[protoProp].indexOf || function (item) {\n            var i = 0,\n                len = this.length;\n            for (; i < len; i++) {\n                if (i in this && this[i] === item) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        // Vendors: please allow content code to instantiate DOMExceptions\n        ,\n            DOMEx = function (type, message) {\n            this.name = type;\n            this.code = DOMException[type];\n            this.message = message;\n        },\n            checkTokenAndGetIndex = function (classList, token) {\n            if (token === \"\") {\n                throw new DOMEx(\"SYNTAX_ERR\", \"An invalid or illegal string was specified\");\n            }\n            if (/\\s/.test(token)) {\n                throw new DOMEx(\"INVALID_CHARACTER_ERR\", \"String contains an invalid character\");\n            }\n            return arrIndexOf.call(classList, token);\n        },\n            ClassList = function (elem) {\n            var trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\"),\n                classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n                i = 0,\n                len = classes.length;\n            for (; i < len; i++) {\n                this.push(classes[i]);\n            }\n            this._updateClassName = function () {\n                elem.setAttribute(\"class\", this.toString());\n            };\n        },\n            classListProto = ClassList[protoProp] = [],\n            classListGetter = function () {\n            return new ClassList(this);\n        };\n        // Most DOMException implementations don't allow calling DOMException's toString()\n        // on non-DOMExceptions. Error's toString() is sufficient here.\n        DOMEx[protoProp] = Error[protoProp];\n        classListProto.item = function (i) {\n            return this[i] || null;\n        };\n        classListProto.contains = function (token) {\n            token += \"\";\n            return checkTokenAndGetIndex(this, token) !== -1;\n        };\n        classListProto.add = function () {\n            var tokens = arguments,\n                i = 0,\n                l = tokens.length,\n                token,\n                updated = false;\n            do {\n                token = tokens[i] + \"\";\n                if (checkTokenAndGetIndex(this, token) === -1) {\n                    this.push(token);\n                    updated = true;\n                }\n            } while (++i < l);\n\n            if (updated) {\n                this._updateClassName();\n            }\n        };\n        classListProto.remove = function () {\n            var tokens = arguments,\n                i = 0,\n                l = tokens.length,\n                token,\n                updated = false,\n                index;\n            do {\n                token = tokens[i] + \"\";\n                index = checkTokenAndGetIndex(this, token);\n                while (index !== -1) {\n                    this.splice(index, 1);\n                    updated = true;\n                    index = checkTokenAndGetIndex(this, token);\n                }\n            } while (++i < l);\n\n            if (updated) {\n                this._updateClassName();\n            }\n        };\n        classListProto.toggle = function (token, force) {\n            token += \"\";\n\n            var result = this.contains(token),\n                method = result ? force !== true && \"remove\" : force !== false && \"add\";\n\n            if (method) {\n                this[method](token);\n            }\n\n            if (force === true || force === false) {\n                return force;\n            } else {\n                return !result;\n            }\n        };\n        classListProto.toString = function () {\n            return this.join(\" \");\n        };\n\n        if (objCtr.defineProperty) {\n            var classListPropDesc = {\n                get: classListGetter,\n                enumerable: true,\n                configurable: true\n            };\n            try {\n                objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n            } catch (ex) {\n                // IE 8 doesn't support enumerable:true\n                if (ex.number === -2146823252) {\n                    classListPropDesc.enumerable = false;\n                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n                }\n            }\n        } else if (objCtr[protoProp].__defineGetter__) {\n            elemCtrProto.__defineGetter__(classListProp, classListGetter);\n        }\n    })(self);\n}\n\n(function (root, factory) {\n    \"use strict\";\n    if (typeof module === \"object\") {\n        module.exports = factory;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function () {\n            return factory;\n        });\n    } else {\n        root.MediumEditor = factory;\n    }\n})(undefined, (function () {\n    \"use strict\";\n\n    var Util;\n\n    (function (window, document) {\n        \"use strict\";\n\n        function copyInto(dest, source, overwrite) {\n            var prop;\n            dest = dest || {};\n            for (prop in source) {\n                if (source.hasOwnProperty(prop) && (overwrite || dest.hasOwnProperty(prop) === false)) {\n                    dest[prop] = source[prop];\n                }\n            }\n            return dest;\n        }\n\n        Util = {\n\n            // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n            // by rg89\n            isIE: navigator.appName === \"Microsoft Internet Explorer\" || navigator.appName === \"Netscape\" && new RegExp(\"Trident/.*rv:([0-9]{1,}[.0-9]{0,})\").exec(navigator.userAgent) !== null,\n\n            // https://github.com/jashkenas/underscore\n            keyCode: {\n                BACKSPACE: 8,\n                TAB: 9,\n                ENTER: 13,\n                ESCAPE: 27,\n                SPACE: 32,\n                DELETE: 46\n            },\n\n            parentElements: [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\"],\n\n            defaults: function defaults(dest, source) {\n                return copyInto(dest, source);\n            },\n\n            extend: function extend(dest, source) {\n                return copyInto(dest, source, true);\n            },\n\n            derives: function derives(base, derived) {\n                var origPrototype = derived.prototype;\n                function Proto() {}\n                Proto.prototype = base.prototype;\n                derived.prototype = new Proto();\n                derived.prototype.constructor = base;\n                derived.prototype = copyInto(derived.prototype, origPrototype);\n                return derived;\n            },\n\n            // Find the next node in the DOM tree that represents any text that is being\n            // displayed directly next to the targetNode (passed as an argument)\n            // Text that appears directly next to the current node can be:\n            //  - A sibling text node\n            //  - A descendant of a sibling element\n            //  - A sibling text node of an ancestor\n            //  - A descendant of a sibling element of an ancestor\n            findAdjacentTextNodeWithContent: function findAdjacentTextNodeWithContent(rootNode, targetNode, ownerDocument) {\n                var pastTarget = false,\n                    nextNode,\n                    nodeIterator = ownerDocument.createNodeIterator(rootNode, NodeFilter.SHOW_TEXT, null, false);\n\n                // Use a native NodeIterator to iterate over all the text nodes that are descendants\n                // of the rootNode.  Once past the targetNode, choose the first non-empty text node\n                nextNode = nodeIterator.nextNode();\n                while (nextNode) {\n                    if (nextNode === targetNode) {\n                        pastTarget = true;\n                    } else if (pastTarget) {\n                        if (nextNode.nodeType === 3 && nextNode.nodeValue && nextNode.nodeValue.trim().length > 0) {\n                            break;\n                        }\n                    }\n                    nextNode = nodeIterator.nextNode();\n                }\n\n                return nextNode;\n            },\n\n            isDescendant: function isDescendant(parent, child) {\n                if (!parent || !child) {\n                    return false;\n                }\n                var node = child.parentNode;\n                while (node !== null) {\n                    if (node === parent) {\n                        return true;\n                    }\n                    node = node.parentNode;\n                }\n                return false;\n            },\n\n            // https://github.com/jashkenas/underscore\n            isElement: function isElement(obj) {\n                return !!(obj && obj.nodeType === 1);\n            },\n\n            now: function now() {\n                return Date.now || new Date().getTime();\n            },\n\n            // https://github.com/jashkenas/underscore\n            throttle: function throttle(func, wait) {\n                var THROTTLE_INTERVAL = 50,\n                    context,\n                    args,\n                    result,\n                    timeout = null,\n                    previous = 0,\n                    later;\n\n                if (!wait && wait !== 0) {\n                    wait = THROTTLE_INTERVAL;\n                }\n\n                later = function () {\n                    previous = Util.now();\n                    timeout = null;\n                    result = func.apply(context, args);\n                    if (!timeout) {\n                        context = args = null;\n                    }\n                };\n\n                return function () {\n                    var currNow = Util.now(),\n                        remaining = wait - (currNow - previous);\n                    context = this;\n                    args = arguments;\n                    if (remaining <= 0 || remaining > wait) {\n                        clearTimeout(timeout);\n                        timeout = null;\n                        previous = currNow;\n                        result = func.apply(context, args);\n                        if (!timeout) {\n                            context = args = null;\n                        }\n                    } else if (!timeout) {\n                        timeout = setTimeout(later, remaining);\n                    }\n                    return result;\n                };\n            },\n\n            traverseUp: function (current, testElementFunction) {\n                do {\n                    if (current.nodeType === 1) {\n                        if (testElementFunction(current)) {\n                            return current;\n                        }\n                        // do not traverse upwards past the nearest containing editor\n                        if (current.getAttribute(\"data-medium-element\")) {\n                            return false;\n                        }\n                    }\n\n                    current = current.parentNode;\n                } while (current);\n\n                return false;\n            },\n\n            htmlEntities: function (str) {\n                // converts special characters (like <) into their escaped/encoded values (like &lt;).\n                // This allows you to show to display the string without the browser reading it as HTML.\n                return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n            },\n\n            // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div\n            insertHTMLCommand: function (doc, html) {\n                var selection, range, el, fragment, node, lastNode;\n\n                if (doc.queryCommandSupported(\"insertHTML\")) {\n                    try {\n                        return doc.execCommand(\"insertHTML\", false, html);\n                    } catch (ignore) {}\n                }\n\n                selection = window.getSelection();\n                if (selection.getRangeAt && selection.rangeCount) {\n                    range = selection.getRangeAt(0);\n                    range.deleteContents();\n\n                    el = doc.createElement(\"div\");\n                    el.innerHTML = html;\n                    fragment = doc.createDocumentFragment();\n                    while (el.firstChild) {\n                        node = el.firstChild;\n                        lastNode = fragment.appendChild(node);\n                    }\n                    range.insertNode(fragment);\n\n                    // Preserve the selection:\n                    if (lastNode) {\n                        range = range.cloneRange();\n                        range.setStartAfter(lastNode);\n                        range.collapse(true);\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                    }\n                }\n            },\n\n            // TODO: not sure if this should be here\n            setTargetBlank: function (el) {\n                var i;\n                if (el.tagName.toLowerCase() === \"a\") {\n                    el.target = \"_blank\";\n                } else {\n                    el = el.getElementsByTagName(\"a\");\n\n                    for (i = 0; i < el.length; i += 1) {\n                        el[i].target = \"_blank\";\n                    }\n                }\n            },\n\n            isListItemChild: function (node) {\n                var parentNode = node.parentNode,\n                    tagName = parentNode.tagName.toLowerCase();\n                while (this.parentElements.indexOf(tagName) === -1 && tagName !== \"div\") {\n                    if (tagName === \"li\") {\n                        return true;\n                    }\n                    parentNode = parentNode.parentNode;\n                    if (parentNode && parentNode.tagName) {\n                        tagName = parentNode.tagName.toLowerCase();\n                    } else {\n                        return false;\n                    }\n                }\n                return false;\n            }\n        };\n    })(window, document);\n\n    var Selection;\n\n    (function (window, document) {\n        \"use strict\";\n\n        Selection = {\n            // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n            // by You\n            getSelectionStart: function (ownerDocument) {\n                var node = ownerDocument.getSelection().anchorNode,\n                    startNode = node && node.nodeType === 3 ? node.parentNode : node;\n                return startNode;\n            },\n\n            findMatchingSelectionParent: function (testElementFunction, contentWindow) {\n                var selection = contentWindow.getSelection(),\n                    range,\n                    current;\n\n                if (selection.rangeCount === 0) {\n                    return false;\n                }\n\n                range = selection.getRangeAt(0);\n                current = range.commonAncestorContainer;\n\n                return Util.traverseUp(current, testElementFunction);\n            },\n\n            getSelectionElement: function (contentWindow) {\n                return this.findMatchingSelectionParent(function (el) {\n                    return el.getAttribute(\"data-medium-element\");\n                }, contentWindow);\n            },\n\n            selectionInContentEditableFalse: function (contentWindow) {\n                return this.findMatchingSelectionParent(function (el) {\n                    return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n                }, contentWindow);\n            },\n\n            // http://stackoverflow.com/questions/4176923/html-of-selected-text\n            // by Tim Down\n            getSelectionHtml: function getSelectionHtml() {\n                var i,\n                    html = \"\",\n                    sel,\n                    len,\n                    container;\n                if (this.options.contentWindow.getSelection !== undefined) {\n                    sel = this.options.contentWindow.getSelection();\n                    if (sel.rangeCount) {\n                        container = this.options.ownerDocument.createElement(\"div\");\n                        for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                            container.appendChild(sel.getRangeAt(i).cloneContents());\n                        }\n                        html = container.innerHTML;\n                    }\n                } else if (this.options.ownerDocument.selection !== undefined) {\n                    if (this.options.ownerDocument.selection.type === \"Text\") {\n                        html = this.options.ownerDocument.selection.createRange().htmlText;\n                    }\n                }\n                return html;\n            },\n\n            /**\n             *  Find the caret position within an element irrespective of any inline tags it may contain.\n             *\n             *  @param {DOMElement} An element containing the cursor to find offsets relative to.\n             *  @param {Range} A Range representing cursor position. Will window.getSelection if none is passed.\n             *  @return {Object} 'left' and 'right' attributes contain offsets from begining and end of Element\n             */\n            getCaretOffsets: function getCaretOffsets(element, range) {\n                var preCaretRange, postCaretRange;\n\n                if (!range) {\n                    range = window.getSelection().getRangeAt(0);\n                }\n\n                preCaretRange = range.cloneRange();\n                postCaretRange = range.cloneRange();\n\n                preCaretRange.selectNodeContents(element);\n                preCaretRange.setEnd(range.endContainer, range.endOffset);\n\n                postCaretRange.selectNodeContents(element);\n                postCaretRange.setStart(range.endContainer, range.endOffset);\n\n                return {\n                    left: preCaretRange.toString().length,\n                    right: postCaretRange.toString().length\n                };\n            },\n\n            // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n            rangeSelectsSingleNode: function (range) {\n                var startNode = range.startContainer;\n                return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n            },\n\n            getSelectedParentElement: function (range) {\n                var selectedParentElement = null;\n                if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n                    selectedParentElement = range.startContainer.childNodes[range.startOffset];\n                } else if (range.startContainer.nodeType === 3) {\n                    selectedParentElement = range.startContainer.parentNode;\n                } else {\n                    selectedParentElement = range.startContainer;\n                }\n                return selectedParentElement;\n            },\n\n            getSelectionData: function (el) {\n                var tagName;\n\n                if (el && el.tagName) {\n                    tagName = el.tagName.toLowerCase();\n                }\n\n                while (el && Util.parentElements.indexOf(tagName) === -1) {\n                    el = el.parentNode;\n                    if (el && el.tagName) {\n                        tagName = el.tagName.toLowerCase();\n                    }\n                }\n\n                return {\n                    el: el,\n                    tagName: tagName\n                };\n            }\n        };\n    })(document, window);\n\n    var DefaultButton, ButtonsData;\n\n    (function (window, document) {\n        \"use strict\";\n\n        ButtonsData = {\n            bold: {\n                name: \"bold\",\n                action: \"bold\",\n                aria: \"bold\",\n                tagNames: [\"b\", \"strong\"],\n                style: {\n                    prop: \"font-weight\",\n                    value: \"700|bold\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b>B</b>\",\n                contentFA: \"<i class=\\\"fa fa-bold\\\"></i>\",\n                key: \"b\"\n            },\n            italic: {\n                name: \"italic\",\n                action: \"italic\",\n                aria: \"italic\",\n                tagNames: [\"i\", \"em\"],\n                style: {\n                    prop: \"font-style\",\n                    value: \"italic\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b><i>I</i></b>\",\n                contentFA: \"<i class=\\\"fa fa-italic\\\"></i>\",\n                key: \"i\"\n            },\n            underline: {\n                name: \"underline\",\n                action: \"underline\",\n                aria: \"underline\",\n                tagNames: [\"u\"],\n                style: {\n                    prop: \"text-decoration\",\n                    value: \"underline\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b><u>U</u></b>\",\n                contentFA: \"<i class=\\\"fa fa-underline\\\"></i>\",\n                key: \"u\"\n            },\n            strikethrough: {\n                name: \"strikethrough\",\n                action: \"strikethrough\",\n                aria: \"strike through\",\n                tagNames: [\"strike\"],\n                style: {\n                    prop: \"text-decoration\",\n                    value: \"line-through\"\n                },\n                useQueryState: true,\n                contentDefault: \"<s>A</s>\",\n                contentFA: \"<i class=\\\"fa fa-strikethrough\\\"></i>\"\n            },\n            superscript: {\n                name: \"superscript\",\n                action: \"superscript\",\n                aria: \"superscript\",\n                tagNames: [\"sup\"],\n                /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for superscript\n                   https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n                // useQueryState: true\n                contentDefault: \"<b>x<sup>1</sup></b>\",\n                contentFA: \"<i class=\\\"fa fa-superscript\\\"></i>\"\n            },\n            subscript: {\n                name: \"subscript\",\n                action: \"subscript\",\n                aria: \"subscript\",\n                tagNames: [\"sub\"],\n                /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for subscript\n                   https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n                // useQueryState: true\n                contentDefault: \"<b>x<sub>1</sub></b>\",\n                contentFA: \"<i class=\\\"fa fa-subscript\\\"></i>\"\n            },\n            image: {\n                name: \"image\",\n                action: \"image\",\n                aria: \"image\",\n                tagNames: [\"img\"],\n                contentDefault: \"<b>image</b>\",\n                contentFA: \"<i class=\\\"fa fa-picture-o\\\"></i>\"\n            },\n            quote: {\n                name: \"quote\",\n                action: \"append-blockquote\",\n                aria: \"blockquote\",\n                tagNames: [\"blockquote\"],\n                contentDefault: \"<b>&ldquo;</b>\",\n                contentFA: \"<i class=\\\"fa fa-quote-right\\\"></i>\"\n            },\n            orderedlist: {\n                name: \"orderedlist\",\n                action: \"insertorderedlist\",\n                aria: \"ordered list\",\n                tagNames: [\"ol\"],\n                useQueryState: true,\n                contentDefault: \"<b>1.</b>\",\n                contentFA: \"<i class=\\\"fa fa-list-ol\\\"></i>\"\n            },\n            unorderedlist: {\n                name: \"unorderedlist\",\n                action: \"insertunorderedlist\",\n                aria: \"unordered list\",\n                tagNames: [\"ul\"],\n                useQueryState: true,\n                contentDefault: \"<b>&bull;</b>\",\n                contentFA: \"<i class=\\\"fa fa-list-ul\\\"></i>\"\n            },\n            pre: {\n                name: \"pre\",\n                action: \"append-pre\",\n                aria: \"preformatted text\",\n                tagNames: [\"pre\"],\n                contentDefault: \"<b>0101</b>\",\n                contentFA: \"<i class=\\\"fa fa-code fa-lg\\\"></i>\"\n            },\n            indent: {\n                name: \"indent\",\n                action: \"indent\",\n                aria: \"indent\",\n                tagNames: [],\n                contentDefault: \"<b>&rarr;</b>\",\n                contentFA: \"<i class=\\\"fa fa-indent\\\"></i>\"\n            },\n            outdent: {\n                name: \"outdent\",\n                action: \"outdent\",\n                aria: \"outdent\",\n                tagNames: [],\n                contentDefault: \"<b>&larr;</b>\",\n                contentFA: \"<i class=\\\"fa fa-outdent\\\"></i>\"\n            },\n            justifyCenter: {\n                name: \"justifyCenter\",\n                action: \"justifyCenter\",\n                aria: \"center justify\",\n                tagNames: [],\n                style: {\n                    prop: \"text-align\",\n                    value: \"center\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b>C</b>\",\n                contentFA: \"<i class=\\\"fa fa-align-center\\\"></i>\"\n            },\n            justifyFull: {\n                name: \"justifyFull\",\n                action: \"justifyFull\",\n                aria: \"full justify\",\n                tagNames: [],\n                style: {\n                    prop: \"text-align\",\n                    value: \"justify\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b>J</b>\",\n                contentFA: \"<i class=\\\"fa fa-align-justify\\\"></i>\"\n            },\n            justifyLeft: {\n                name: \"justifyLeft\",\n                action: \"justifyLeft\",\n                aria: \"left justify\",\n                tagNames: [],\n                style: {\n                    prop: \"text-align\",\n                    value: \"left\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b>L</b>\",\n                contentFA: \"<i class=\\\"fa fa-align-left\\\"></i>\"\n            },\n            justifyRight: {\n                name: \"justifyRight\",\n                action: \"justifyRight\",\n                aria: \"right justify\",\n                tagNames: [],\n                style: {\n                    prop: \"text-align\",\n                    value: \"right\"\n                },\n                useQueryState: true,\n                contentDefault: \"<b>R</b>\",\n                contentFA: \"<i class=\\\"fa fa-align-right\\\"></i>\"\n            },\n            header1: {\n                name: \"header1\",\n                action: function (options) {\n                    return \"append-\" + options.firstHeader;\n                },\n                aria: function (options) {\n                    return options.firstHeader;\n                },\n                tagNames: function (options) {\n                    return [options.firstHeader];\n                },\n                contentDefault: \"<b>H1</b>\"\n            },\n            header2: {\n                name: \"header2\",\n                action: function (options) {\n                    return \"append-\" + options.secondHeader;\n                },\n                aria: function (options) {\n                    return options.secondHeader;\n                },\n                tagNames: function (options) {\n                    return [options.secondHeader];\n                },\n                contentDefault: \"<b>H2</b>\"\n            }\n        };\n\n        DefaultButton = function (options, instance) {\n            this.options = options;\n            this.name = options.name;\n            this.init(instance);\n        };\n\n        DefaultButton.prototype = {\n            init: function (instance) {\n                this.base = instance;\n\n                this.button = this.createButton();\n                this.base.on(this.button, \"click\", this.handleClick.bind(this));\n            },\n            getButton: function () {\n                return this.button;\n            },\n            getAction: function () {\n                return typeof this.options.action === \"function\" ? this.options.action(this.base.options) : this.options.action;\n            },\n            getAria: function () {\n                return typeof this.options.aria === \"function\" ? this.options.aria(this.base.options) : this.options.aria;\n            },\n            getTagNames: function () {\n                return typeof this.options.tagNames === \"function\" ? this.options.tagNames(this.base.options) : this.options.tagNames;\n            },\n            createButton: function () {\n                var button = this.base.options.ownerDocument.createElement(\"button\"),\n                    content = this.options.contentDefault;\n                button.classList.add(\"medium-editor-action\");\n                button.classList.add(\"medium-editor-action-\" + this.name);\n                button.setAttribute(\"data-action\", this.getAction());\n                button.setAttribute(\"aria-label\", this.getAria());\n                if (this.base.options.buttonLabels) {\n                    if (this.base.options.buttonLabels === \"fontawesome\" && this.options.contentFA) {\n                        content = this.options.contentFA;\n                    } else if (typeof this.base.options.buttonLabels === \"object\" && this.base.options.buttonLabels[this.name]) {\n                        content = this.base.options.buttonLabels[this.options.name];\n                    }\n                }\n                button.innerHTML = content;\n                return button;\n            },\n            handleClick: function (evt) {\n                evt.preventDefault();\n                evt.stopPropagation();\n\n                var action = this.getAction();\n\n                if (action) {\n                    this.base.execAction(action);\n                }\n            },\n            isActive: function () {\n                return this.button.classList.contains(this.base.options.activeButtonClass);\n            },\n            setInactive: function () {\n                this.button.classList.remove(this.base.options.activeButtonClass);\n                delete this.knownState;\n            },\n            setActive: function () {\n                this.button.classList.add(this.base.options.activeButtonClass);\n                delete this.knownState;\n            },\n            queryCommandState: function () {\n                var queryState = null;\n                if (this.options.useQueryState) {\n                    queryState = this.base.queryCommandState(this.getAction());\n                }\n                return queryState;\n            },\n            isAlreadyApplied: function (node) {\n                var isMatch = false,\n                    tagNames = this.getTagNames(),\n                    styleVals,\n                    computedStyle;\n\n                if (this.knownState === false || this.knownState === true) {\n                    return this.knownState;\n                }\n\n                if (tagNames && tagNames.length > 0 && node.tagName) {\n                    isMatch = tagNames.indexOf(node.tagName.toLowerCase()) !== -1;\n                }\n\n                if (!isMatch && this.options.style) {\n                    styleVals = this.options.style.value.split(\"|\");\n                    computedStyle = this.base.options.contentWindow.getComputedStyle(node, null).getPropertyValue(this.options.style.prop);\n                    styleVals.forEach((function (val) {\n                        if (!this.knownState) {\n                            this.knownState = isMatch = computedStyle.indexOf(val) !== -1;\n                        }\n                    }).bind(this));\n                }\n\n                return isMatch;\n            }\n        };\n    })(window, document);\n\n    var pasteHandler;\n\n    (function (window, document) {\n        \"use strict\";\n        /*jslint regexp: true*/\n        /*\n            jslint does not allow character negation, because the negation\n            will not match any unicode characters. In the regexes in this\n            block, negation is used specifically to match the end of an html\n            tag, and in fact unicode characters *should* be allowed.\n        */\n        function createReplacements() {\n            return [\n\n            // replace two bogus tags that begin pastes from google docs\n            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"], [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\n            // un-html spaces and newlines inserted by OS X\n            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), \" \"], [new RegExp(/<br class=\"Apple-interchange-newline\">/g), \"<br>\"],\n\n            // replace google docs italics+bold with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), \"<span class=\\\"replace-with italic bold\\\">\"],\n\n            // replace google docs italics with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), \"<span class=\\\"replace-with italic\\\">\"],\n\n            //[replace google docs bolds with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), \"<span class=\\\"replace-with bold\\\">\"],\n\n            // replace manually entered b/i/a tags with real ones\n            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), \"<$1$2>\"],\n\n            // replace manually a tags with real ones, converting smart-quotes from google docs\n            [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), \"<a href=\\\"$2\\\">\"]];\n        }\n        /*jslint regexp: false*/\n\n        pasteHandler = {\n            handlePaste: function (element, evt, options) {\n                var paragraphs,\n                    html = \"\",\n                    p,\n                    dataFormatHTML = \"text/html\",\n                    dataFormatPlain = \"text/plain\";\n\n                element.classList.remove(\"medium-editor-placeholder\");\n                if (!options.forcePlainText && !options.cleanPastedHTML) {\n                    return element;\n                }\n\n                if (options.contentWindow.clipboardData && evt.clipboardData === undefined) {\n                    evt.clipboardData = options.contentWindow.clipboardData;\n                    // If window.clipboardData exists, but e.clipboardData doesn't exist,\n                    // we're probably in IE. IE only has two possibilities for clipboard\n                    // data format: 'Text' and 'URL'.\n                    //\n                    // Of the two, we want 'Text':\n                    dataFormatHTML = \"Text\";\n                    dataFormatPlain = \"Text\";\n                }\n\n                if (evt.clipboardData && evt.clipboardData.getData && !evt.defaultPrevented) {\n                    evt.preventDefault();\n\n                    if (options.cleanPastedHTML && evt.clipboardData.getData(dataFormatHTML)) {\n                        return this.cleanPaste(evt.clipboardData.getData(dataFormatHTML), options);\n                    }\n                    if (!(options.disableReturn || element.getAttribute(\"data-disable-return\"))) {\n                        paragraphs = evt.clipboardData.getData(dataFormatPlain).split(/[\\r\\n]/g);\n                        for (p = 0; p < paragraphs.length; p += 1) {\n                            if (paragraphs[p] !== \"\") {\n                                html += \"<p>\" + Util.htmlEntities(paragraphs[p]) + \"</p>\";\n                            }\n                        }\n                        Util.insertHTMLCommand(options.ownerDocument, html);\n                    } else {\n                        html = Util.htmlEntities(evt.clipboardData.getData(dataFormatPlain));\n                        Util.insertHTMLCommand(options.ownerDocument, html);\n                    }\n                }\n            },\n\n            cleanPaste: function (text, options) {\n                var i,\n                    elList,\n                    workEl,\n                    el = Selection.getSelectionElement(options.contentWindow),\n                    multiline = /<p|<br|<div/.test(text),\n                    replacements = createReplacements();\n\n                for (i = 0; i < replacements.length; i += 1) {\n                    text = text.replace(replacements[i][0], replacements[i][1]);\n                }\n\n                if (multiline) {\n                    // double br's aren't converted to p tags, but we want paragraphs.\n                    elList = text.split(\"<br><br>\");\n\n                    this.pasteHTML(\"<p>\" + elList.join(\"</p><p>\") + \"</p>\", options.ownerDocument);\n\n                    try {\n                        options.ownerDocument.execCommand(\"insertText\", false, \"\\n\");\n                    } catch (ignore) {}\n\n                    // block element cleanup\n                    elList = el.querySelectorAll(\"a,p,div,br\");\n                    for (i = 0; i < elList.length; i += 1) {\n                        workEl = elList[i];\n\n                        switch (workEl.tagName.toLowerCase()) {\n                            case \"a\":\n                                if (options.targetBlank) {\n                                    Util.setTargetBlank(workEl);\n                                }\n                                break;\n                            case \"p\":\n                            case \"div\":\n                                this.filterCommonBlocks(workEl);\n                                break;\n                            case \"br\":\n                                this.filterLineBreak(workEl);\n                                break;\n                        }\n                    }\n                } else {\n                    this.pasteHTML(text, options.ownerDocument);\n                }\n            },\n\n            pasteHTML: function (html, ownerDocument) {\n                var elList,\n                    workEl,\n                    i,\n                    fragmentBody,\n                    pasteBlock = ownerDocument.createDocumentFragment();\n\n                pasteBlock.appendChild(ownerDocument.createElement(\"body\"));\n\n                fragmentBody = pasteBlock.querySelector(\"body\");\n                fragmentBody.innerHTML = html;\n\n                this.cleanupSpans(fragmentBody, ownerDocument);\n\n                elList = fragmentBody.querySelectorAll(\"*\");\n                for (i = 0; i < elList.length; i += 1) {\n                    workEl = elList[i];\n\n                    // delete ugly attributes\n                    workEl.removeAttribute(\"class\");\n                    workEl.removeAttribute(\"style\");\n                    workEl.removeAttribute(\"dir\");\n\n                    if (workEl.tagName.toLowerCase() === \"meta\") {\n                        workEl.parentNode.removeChild(workEl);\n                    }\n                }\n                Util.insertHTMLCommand(ownerDocument, fragmentBody.innerHTML.replace(/&nbsp;/g, \" \"));\n            },\n            isCommonBlock: function (el) {\n                return el && (el.tagName.toLowerCase() === \"p\" || el.tagName.toLowerCase() === \"div\");\n            },\n            filterCommonBlocks: function (el) {\n                if (/^\\s*$/.test(el.textContent)) {\n                    el.parentNode.removeChild(el);\n                }\n            },\n            filterLineBreak: function (el) {\n                if (this.isCommonBlock(el.previousElementSibling)) {\n                    // remove stray br's following common block elements\n                    el.parentNode.removeChild(el);\n                } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n                    // remove br's just inside open or close tags of a div/p\n                    el.parentNode.removeChild(el);\n                } else if (el.parentNode.childElementCount === 1 && el.parentNode.textContent === \"\") {\n                    // and br's that are the only child of a div/p\n                    this.removeWithParent(el);\n                }\n            },\n\n            // remove an element, including its parent, if it is the only element within its parent\n            removeWithParent: function (el) {\n                if (el && el.parentNode) {\n                    if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n                        el.parentNode.parentNode.removeChild(el.parentNode);\n                    } else {\n                        el.parentNode.removeChild(el.parentNode);\n                    }\n                }\n            },\n\n            cleanupSpans: function (container_el, ownerDocument) {\n                var i,\n                    el,\n                    new_el,\n                    spans = container_el.querySelectorAll(\".replace-with\"),\n                    isCEF = function (el) {\n                    return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n                };\n\n                for (i = 0; i < spans.length; i += 1) {\n                    el = spans[i];\n                    new_el = ownerDocument.createElement(el.classList.contains(\"bold\") ? \"b\" : \"i\");\n\n                    if (el.classList.contains(\"bold\") && el.classList.contains(\"italic\")) {\n                        // add an i tag as well if this has both italics and bold\n                        new_el.innerHTML = \"<i>\" + el.innerHTML + \"</i>\";\n                    } else {\n                        new_el.innerHTML = el.innerHTML;\n                    }\n                    el.parentNode.replaceChild(new_el, el);\n                }\n\n                spans = container_el.querySelectorAll(\"span\");\n                for (i = 0; i < spans.length; i += 1) {\n                    el = spans[i];\n\n                    // bail if span is in contenteditable = false\n                    if (Util.traverseUp(el, isCEF)) {\n                        return false;\n                    }\n\n                    // remove empty spans, replace others with their contents\n                    if (/^\\s*$/.test()) {\n                        el.parentNode.removeChild(el);\n                    } else {\n                        el.parentNode.replaceChild(ownerDocument.createTextNode(el.textContent), el);\n                    }\n                }\n            }\n        };\n    })(window, document);\n\n    var AnchorExtension;\n\n    (function (window, document) {\n        \"use strict\";\n\n        function AnchorDerived() {\n            this.parent = true;\n            this.options = {\n                name: \"anchor\",\n                action: \"createLink\",\n                aria: \"link\",\n                tagNames: [\"a\"],\n                contentDefault: \"<b>#</b>\",\n                contentFA: \"<i class=\\\"fa fa-link\\\"></i>\"\n            };\n            this.name = \"anchor\";\n            this.hasForm = true;\n        }\n\n        AnchorDerived.prototype = {\n\n            // Button and Extension handling\n\n            // Called when the button the toolbar is clicked\n            // Overrides DefaultButton.handleClick\n            handleClick: function (evt) {\n                evt.preventDefault();\n                evt.stopPropagation();\n\n                if (!this.base.selection) {\n                    this.base.checkSelection();\n                }\n\n                var selectedParentElement = Selection.getSelectedParentElement(this.base.selectionRange);\n                if (selectedParentElement.tagName && selectedParentElement.tagName.toLowerCase() === \"a\") {\n                    return this.base.execAction(\"unlink\");\n                }\n\n                if (!this.isDisplayed()) {\n                    this.showForm();\n                }\n\n                return false;\n            },\n\n            // Called by medium-editor to append form to the toolbar\n            getForm: function () {\n                if (!this.anchorForm) {\n                    this.anchorForm = this.createForm();\n                }\n                return this.anchorForm;\n            },\n\n            // Used by medium-editor when the default toolbar is to be displayed\n            isDisplayed: function () {\n                return this.getForm().style.display === \"block\";\n            },\n\n            hideForm: function () {\n                this.getForm().style.display = \"none\";\n                this.getInput().value = \"\";\n            },\n\n            showForm: function (link_value) {\n                var input = this.getInput();\n\n                this.base.saveSelection();\n                this.base.hideToolbarDefaultActions();\n                this.getForm().style.display = \"block\";\n                this.base.setToolbarPosition();\n                this.base.keepToolbarAlive = true;\n\n                input.value = link_value || \"\";\n                input.focus();\n            },\n\n            // Called by core when tearing down medium-editor (deactivate)\n            deactivate: function () {\n                if (!this.anchorForm) {\n                    return false;\n                }\n\n                if (this.anchorForm.parentNode) {\n                    this.anchorForm.parentNode.removeChild(this.anchorForm);\n                }\n\n                delete this.anchorForm;\n            },\n\n            // core methods\n\n            doLinkCreation: function () {\n                var targetCheckbox = this.getForm().querySelector(\".medium-editor-toolbar-anchor-target\"),\n                    buttonCheckbox = this.getForm().querySelector(\".medium-editor-toolbar-anchor-button\"),\n                    opts = {\n                    url: this.getInput().value\n                };\n\n                this.base.restoreSelection();\n\n                if (this.base.options.checkLinkFormat) {\n                    opts.url = this.checkLinkFormat(opts.url);\n                }\n\n                if (targetCheckbox && targetCheckbox.checked) {\n                    opts.target = \"_blank\";\n                } else {\n                    opts.target = \"_self\";\n                }\n\n                if (buttonCheckbox && buttonCheckbox.checked) {\n                    opts.buttonClass = this.base.options.anchorButtonClass;\n                }\n\n                this.base.createLink(opts);\n                this.base.keepToolbarAlive = false;\n                this.base.checkSelection();\n            },\n\n            checkLinkFormat: function (value) {\n                var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n                return (re.test(value) ? \"\" : \"http://\") + value;\n            },\n\n            doFormCancel: function () {\n                this.base.restoreSelection();\n                this.base.keepToolbarAlive = false;\n                this.base.checkSelection();\n            },\n\n            // form creation and event handling\n\n            createForm: function () {\n                var doc = this.base.options.ownerDocument,\n                    form = doc.createElement(\"div\"),\n                    input = doc.createElement(\"input\"),\n                    close = doc.createElement(\"a\"),\n                    save = doc.createElement(\"a\"),\n                    target,\n                    target_label,\n                    button,\n                    button_label;\n\n                // Anchor Form (div)\n                form.className = \"medium-editor-toolbar-form\";\n                form.id = \"medium-editor-toolbar-form-anchor-\" + this.base.id;\n\n                // Handle clicks on the form itself\n                this.base.on(form, \"click\", this.handleFormClick.bind(this));\n\n                // Add url textbox\n                input.setAttribute(\"type\", \"text\");\n                input.className = \"medium-editor-toolbar-input\";\n                input.setAttribute(\"placeholder\", this.base.options.anchorInputPlaceholder);\n                form.appendChild(input);\n\n                // Handle typing in the textbox\n                this.base.on(input, \"keyup\", this.handleTextboxKeyup.bind(this));\n\n                // Handle clicks into the textbox\n                this.base.on(input, \"click\", this.handleFormClick.bind(this));\n\n                // Add save buton\n                save.setAttribute(\"href\", \"#\");\n                save.className = \"medium-editor-toobar-save\";\n                save.innerHTML = this.base.options.buttonLabels === \"fontawesome\" ? \"<i class=\\\"fa fa-check\\\"></i>\" : \"&#10003;\";\n                form.appendChild(save);\n\n                // Handle save button clicks (capture)\n                this.base.on(save, \"click\", this.handleSaveClick.bind(this), true);\n\n                // Add close button\n                close.setAttribute(\"href\", \"#\");\n                close.className = \"medium-editor-toobar-close\";\n                close.innerHTML = this.base.options.buttonLabels === \"fontawesome\" ? \"<i class=\\\"fa fa-times\\\"></i>\" : \"&times;\";\n                form.appendChild(close);\n\n                // Handle close button clicks\n                this.base.on(close, \"click\", this.handleCloseClick.bind(this));\n\n                // (Optional) Add 'open in new window' checkbox\n                if (this.base.options.anchorTarget) {\n                    target = doc.createElement(\"input\");\n                    target.setAttribute(\"type\", \"checkbox\");\n                    target.className = \"medium-editor-toolbar-anchor-target\";\n\n                    target_label = doc.createElement(\"label\");\n                    target_label.innerHTML = this.base.options.anchorInputCheckboxLabel;\n                    target_label.insertBefore(target, target_label.firstChild);\n\n                    form.appendChild(target_label);\n                }\n\n                // (Optional) Add 'add button class to anchor' checkbox\n                if (this.base.options.anchorButton) {\n                    button = doc.createElement(\"input\");\n                    button.setAttribute(\"type\", \"checkbox\");\n                    button.className = \"medium-editor-toolbar-anchor-button\";\n\n                    button_label = doc.createElement(\"label\");\n                    button_label.innerHTML = \"Button\";\n                    button_label.insertBefore(button, button_label.firstChild);\n\n                    form.appendChild(button_label);\n                }\n\n                // Handle click (capture) & focus (capture) outside of the form\n                this.base.on(doc.body, \"click\", this.handleOutsideInteraction.bind(this), true);\n                this.base.on(doc.body, \"focus\", this.handleOutsideInteraction.bind(this), true);\n\n                return form;\n            },\n\n            getInput: function () {\n                return this.getForm().querySelector(\"input.medium-editor-toolbar-input\");\n            },\n\n            handleOutsideInteraction: function (event) {\n                if (event.target !== this.getForm() && !Util.isDescendant(this.getForm(), event.target) && !Util.isDescendant(this.base.toolbarActions, event.target)) {\n                    this.base.keepToolbarAlive = false;\n                    this.base.checkSelection();\n                }\n            },\n\n            handleTextboxKeyup: function (event) {\n                // For ENTER -> create the anchor\n                if (event.keyCode === Util.keyCode.ENTER) {\n                    event.preventDefault();\n                    this.doLinkCreation();\n                    return;\n                }\n\n                // For ESCAPE -> close the form\n                if (event.keyCode === Util.keyCode.ESCAPE) {\n                    event.preventDefault();\n                    this.doFormCancel();\n                }\n            },\n\n            handleFormClick: function (event) {\n                // make sure not to hide form when clicking inside the form\n                event.stopPropagation();\n                this.base.keepToolbarAlive = true;\n            },\n\n            handleSaveClick: function (event) {\n                // Clicking Save -> create the anchor\n                event.preventDefault();\n                this.doLinkCreation();\n            },\n\n            handleCloseClick: function (event) {\n                // Click Close -> close the form\n                event.preventDefault();\n                this.doFormCancel();\n            }\n        };\n\n        AnchorExtension = Util.derives(DefaultButton, AnchorDerived);\n    })(window, document);\n\n    function MediumEditor(elements, options) {\n        \"use strict\";\n        return this.init(elements, options);\n    }\n\n    (function () {\n        \"use strict\";\n\n        MediumEditor.statics = {\n            ButtonsData: ButtonsData,\n            DefaultButton: DefaultButton,\n            AnchorExtension: AnchorExtension\n        };\n\n        MediumEditor.prototype = {\n            defaults: {\n                allowMultiParagraphSelection: true,\n                anchorInputPlaceholder: \"Paste or type a link\",\n                anchorInputCheckboxLabel: \"Open in new window\",\n                anchorPreviewHideDelay: 500,\n                buttons: [\"bold\", \"italic\", \"underline\", \"anchor\", \"header1\", \"header2\", \"quote\"],\n                buttonLabels: false,\n                checkLinkFormat: false,\n                cleanPastedHTML: false,\n                delay: 0,\n                diffLeft: 0,\n                diffTop: -10,\n                disableReturn: false,\n                disableDoubleReturn: false,\n                disableToolbar: false,\n                disableEditing: false,\n                disablePlaceholders: false,\n                toolbarAlign: \"center\",\n                elementsContainer: false,\n                imageDragging: true,\n                standardizeSelectionStart: false,\n                contentWindow: window,\n                ownerDocument: document,\n                firstHeader: \"h3\",\n                forcePlainText: true,\n                placeholder: \"Type your text\",\n                secondHeader: \"h4\",\n                targetBlank: false,\n                anchorTarget: false,\n                anchorButton: false,\n                anchorButtonClass: \"btn\",\n                extensions: {},\n                activeButtonClass: \"medium-editor-button-active\",\n                firstButtonClass: \"medium-editor-button-first\",\n                lastButtonClass: \"medium-editor-button-last\"\n            },\n\n            init: function (elements, options) {\n                var uniqueId = 1;\n\n                this.options = Util.defaults(options, this.defaults);\n                this.setElementSelection(elements);\n                if (this.elements.length === 0) {\n                    return;\n                }\n\n                if (!this.options.elementsContainer) {\n                    this.options.elementsContainer = this.options.ownerDocument.body;\n                }\n\n                while (this.options.elementsContainer.querySelector(\"#medium-editor-toolbar-\" + uniqueId)) {\n                    uniqueId = uniqueId + 1;\n                }\n\n                this.id = uniqueId;\n\n                return this.setup();\n            },\n\n            setup: function () {\n                this.events = [];\n                this.isActive = true;\n                this.initThrottledMethods().initCommands().initElements().bindSelect().bindDragDrop().bindPaste().setPlaceholders().bindElementActions().bindWindowActions();\n            },\n\n            on: function (target, event, listener, useCapture) {\n                target.addEventListener(event, listener, useCapture);\n                this.events.push([target, event, listener, useCapture]);\n            },\n\n            off: function (target, event, listener, useCapture) {\n                var index = this.indexOfListener(target, event, listener, useCapture),\n                    e;\n                if (index !== -1) {\n                    e = this.events.splice(index, 1)[0];\n                    e[0].removeEventListener(e[1], e[2], e[3]);\n                }\n            },\n\n            indexOfListener: function (target, event, listener, useCapture) {\n                var i, n, item;\n                for (i = 0, n = this.events.length; i < n; i = i + 1) {\n                    item = this.events[i];\n                    if (item[0] === target && item[1] === event && item[2] === listener && item[3] === useCapture) {\n                        return i;\n                    }\n                }\n                return -1;\n            },\n\n            delay: function (fn) {\n                var self = this;\n                setTimeout(function () {\n                    if (self.isActive) {\n                        fn();\n                    }\n                }, this.options.delay);\n            },\n\n            removeAllEvents: function () {\n                var e = this.events.pop();\n                while (e) {\n                    e[0].removeEventListener(e[1], e[2], e[3]);\n                    e = this.events.pop();\n                }\n            },\n\n            initThrottledMethods: function () {\n                var self = this;\n\n                // handleResize is throttled because:\n                // - It will be called when the browser is resizing, which can fire many times very quickly\n                // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\n                this.handleResize = Util.throttle(function () {\n                    if (self.isActive) {\n                        self.positionToolbarIfShown();\n                    }\n                });\n\n                // handleBlur is throttled because:\n                // - This method could be called many times due to the type of event handlers that are calling it\n                // - We want a slight delay so that other events in the stack can run, some of which may\n                //   prevent the toolbar from being hidden (via this.keepToolbarAlive).\n                this.handleBlur = Util.throttle(function () {\n                    if (self.isActive && !self.keepToolbarAlive) {\n                        self.hideToolbarActions();\n                    }\n                });\n\n                return this;\n            },\n\n            initElements: function () {\n                var i,\n                    addToolbar = false;\n                for (i = 0; i < this.elements.length; i += 1) {\n                    if (!this.options.disableEditing && !this.elements[i].getAttribute(\"data-disable-editing\")) {\n                        this.elements[i].setAttribute(\"contentEditable\", true);\n                    }\n                    if (!this.elements[i].getAttribute(\"data-placeholder\")) {\n                        this.elements[i].setAttribute(\"data-placeholder\", this.options.placeholder);\n                    }\n                    this.elements[i].setAttribute(\"data-medium-element\", true);\n                    this.elements[i].setAttribute(\"role\", \"textbox\");\n                    this.elements[i].setAttribute(\"aria-multiline\", true);\n                    this.bindParagraphCreation(i);\n                    if (!this.options.disableToolbar && !this.elements[i].getAttribute(\"data-disable-toolbar\")) {\n                        addToolbar = true;\n                    }\n                }\n                // Init toolbar\n                if (addToolbar) {\n                    this.initToolbar().setFirstAndLastButtons().bindAnchorPreview();\n                }\n                return this;\n            },\n\n            setElementSelection: function (selector) {\n                if (!selector) {\n                    selector = [];\n                }\n                // If string, use as query selector\n                if (typeof selector === \"string\") {\n                    selector = this.options.ownerDocument.querySelectorAll(selector);\n                }\n                // If element, put into array\n                if (Util.isElement(selector)) {\n                    selector = [selector];\n                }\n                // Convert NodeList (or other array like object) into an array\n                this.elements = Array.prototype.slice.apply(selector);\n            },\n\n            bindBlur: function () {\n                var self = this,\n                    blurFunction = function (e) {\n                    var isDescendantOfEditorElements = false,\n                        selection = self.options.contentWindow.getSelection(),\n                        selRange = selection.isCollapsed ? null : Selection.getSelectedParentElement(selection.getRangeAt(0)),\n                        i;\n\n                    // This control was introduced also to avoid the toolbar\n                    // to disapper when selecting from right to left and\n                    // the selection ends at the beginning of the text.\n                    for (i = 0; i < self.elements.length; i += 1) {\n                        if (Util.isDescendant(self.elements[i], e.target) || Util.isDescendant(self.elements[i], selRange)) {\n                            isDescendantOfEditorElements = true;\n                            break;\n                        }\n                    }\n                    // If it's not part of the editor, or the toolbar\n                    if (e.target !== self.toolbar && self.elements.indexOf(e.target) === -1 && !isDescendantOfEditorElements && !Util.isDescendant(self.toolbar, e.target) && !Util.isDescendant(self.anchorPreview, e.target)) {\n                        // Activate the placeholder\n                        if (!self.options.disablePlaceholders) {\n                            self.placeholderWrapper(e, self.elements[0]);\n                        }\n\n                        // Hide the toolbar after a small delay so we can prevent this on toolbar click\n                        self.handleBlur();\n                    }\n                };\n\n                // Hide the toolbar when focusing outside of the editor.\n                this.on(this.options.ownerDocument.body, \"click\", blurFunction, true);\n                this.on(this.options.ownerDocument.body, \"focus\", blurFunction, true);\n\n                return this;\n            },\n\n            bindClick: function (i) {\n                var self = this;\n\n                this.on(this.elements[i], \"click\", function () {\n                    if (!self.options.disablePlaceholders) {\n                        // Remove placeholder\n                        this.classList.remove(\"medium-editor-placeholder\");\n                    }\n\n                    if (self.options.staticToolbar) {\n                        self.setToolbarPosition();\n                    }\n                });\n\n                return this;\n            },\n\n            /**\n             * This handles blur and keypress events on elements\n             * Including Placeholders, and tooldbar hiding on blur\n             */\n            bindElementActions: function () {\n                var i;\n\n                for (i = 0; i < this.elements.length; i += 1) {\n                    if (!this.options.disablePlaceholders) {\n                        // Active all of the placeholders\n                        this.activatePlaceholder(this.elements[i]);\n                    }\n\n                    // Bind the return and tab keypress events\n                    this.bindReturn(i).bindKeydown(i).bindClick(i);\n                }\n\n                return this;\n            },\n\n            // Two functions to handle placeholders\n            activatePlaceholder: function (el) {\n                if (!el.querySelector(\"img\") && !el.querySelector(\"blockquote\") && el.textContent.replace(/^\\s+|\\s+$/g, \"\") === \"\") {\n                    el.classList.add(\"medium-editor-placeholder\");\n                }\n            },\n            placeholderWrapper: function (evt, el) {\n                el = el || evt.target;\n                el.classList.remove(\"medium-editor-placeholder\");\n                if (evt.type !== \"keypress\") {\n                    this.activatePlaceholder(el);\n                }\n            },\n\n            serialize: function () {\n                var i,\n                    elementid,\n                    content = {};\n                for (i = 0; i < this.elements.length; i += 1) {\n                    elementid = this.elements[i].id !== \"\" ? this.elements[i].id : \"element-\" + i;\n                    content[elementid] = {\n                        value: this.elements[i].innerHTML.trim()\n                    };\n                }\n                return content;\n            },\n\n            initExtension: function (extension, name) {\n                if (extension.parent) {\n                    extension.base = this;\n                }\n                if (typeof extension.init === \"function\") {\n                    extension.init(this);\n                }\n                if (!extension.name) {\n                    extension.name = name;\n                }\n                return extension;\n            },\n\n            initCommands: function () {\n                var buttons = this.options.buttons,\n                    extensions = this.options.extensions,\n                    ext,\n                    name;\n                this.commands = [];\n\n                buttons.forEach((function (buttonName) {\n                    if (extensions[buttonName]) {\n                        ext = this.initExtension(extensions[buttonName], buttonName);\n                        this.commands.push(ext);\n                    } else if (buttonName === \"anchor\") {\n                        ext = this.initExtension(new AnchorExtension(), buttonName);\n                        this.commands.push(ext);\n                    } else if (ButtonsData.hasOwnProperty(buttonName)) {\n                        ext = new DefaultButton(ButtonsData[buttonName], this);\n                        this.commands.push(ext);\n                    }\n                }).bind(this));\n\n                for (name in extensions) {\n                    if (extensions.hasOwnProperty(name) && buttons.indexOf(name) === -1) {\n                        ext = this.initExtension(extensions[name], name);\n                    }\n                }\n\n                return this;\n            },\n\n            getExtensionByName: function (name) {\n                var extension;\n                if (this.commands && this.commands.length) {\n                    this.commands.forEach(function (ext) {\n                        if (ext.name === name) {\n                            extension = ext;\n                        }\n                    });\n                }\n                return extension;\n            },\n\n            /**\n             * Helper function to call a method with a number of parameters on all registered extensions.\n             * The function assures that the function exists before calling.\n             *\n             * @param {string} funcName name of the function to call\n             * @param [args] arguments passed into funcName\n             */\n            callExtensions: function (funcName) {\n                if (arguments.length < 1) {\n                    return;\n                }\n\n                var args = Array.prototype.slice.call(arguments, 1),\n                    ext,\n                    name;\n\n                for (name in this.options.extensions) {\n                    if (this.options.extensions.hasOwnProperty(name)) {\n                        ext = this.options.extensions[name];\n                        if (ext[funcName] !== undefined) {\n                            ext[funcName].apply(ext, args);\n                        }\n                    }\n                }\n                return this;\n            },\n\n            bindParagraphCreation: function (index) {\n                var self = this;\n                this.on(this.elements[index], \"keypress\", function (e) {\n                    var node, tagName;\n                    if (e.which === Util.keyCode.SPACE) {\n                        node = Selection.getSelectionStart(self.options.ownerDocument);\n                        tagName = node.tagName.toLowerCase();\n                        if (tagName === \"a\") {\n                            self.options.ownerDocument.execCommand(\"unlink\", false, null);\n                        }\n                    }\n                });\n\n                this.on(this.elements[index], \"keyup\", function (e) {\n                    var node = Selection.getSelectionStart(self.options.ownerDocument),\n                        tagName,\n                        editorElement;\n\n                    if (node && node.getAttribute(\"data-medium-element\") && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute(\"data-disable-return\"))) {\n                        self.options.ownerDocument.execCommand(\"formatBlock\", false, \"p\");\n                    }\n                    if (e.which === Util.keyCode.ENTER) {\n                        node = Selection.getSelectionStart(self.options.ownerDocument);\n                        tagName = node.tagName.toLowerCase();\n                        editorElement = Selection.getSelectionElement(self.options.contentWindow);\n\n                        if (!(self.options.disableReturn || editorElement.getAttribute(\"data-disable-return\")) && tagName !== \"li\" && !Util.isListItemChild(node)) {\n                            if (!e.shiftKey) {\n                                // paragraph creation should not be forced within a header tag\n                                if (!/h\\d/.test(tagName)) {\n                                    self.options.ownerDocument.execCommand(\"formatBlock\", false, \"p\");\n                                }\n                            }\n                            if (tagName === \"a\") {\n                                self.options.ownerDocument.execCommand(\"unlink\", false, null);\n                            }\n                        }\n                    }\n                });\n                return this;\n            },\n\n            bindReturn: function (index) {\n                var self = this;\n                this.on(this.elements[index], \"keypress\", function (e) {\n                    if (e.which === Util.keyCode.ENTER) {\n                        if (self.options.disableReturn || this.getAttribute(\"data-disable-return\")) {\n                            e.preventDefault();\n                        } else if (self.options.disableDoubleReturn || this.getAttribute(\"data-disable-double-return\")) {\n                            var node = Selection.getSelectionStart(self.options.contentWindow);\n                            if (node && node.textContent.trim() === \"\") {\n                                e.preventDefault();\n                            }\n                        }\n                    }\n                });\n                return this;\n            },\n\n            bindKeydown: function (index) {\n                var self = this;\n                this.on(this.elements[index], \"keydown\", function (e) {\n                    var node, tag, key;\n\n                    if (e.which === Util.keyCode.TAB) {\n                        // Override tab only for pre nodes\n                        node = Selection.getSelectionStart(self.options.ownerDocument);\n                        tag = node && node.tagName.toLowerCase();\n\n                        if (tag === \"pre\") {\n                            e.preventDefault();\n                            self.options.ownerDocument.execCommand(\"insertHtml\", null, \"    \");\n                        }\n\n                        // Tab to indent list structures!\n                        if (tag === \"li\" || Util.isListItemChild(node)) {\n                            e.preventDefault();\n\n                            // If Shift is down, outdent, otherwise indent\n                            if (e.shiftKey) {\n                                self.options.ownerDocument.execCommand(\"outdent\", e);\n                            } else {\n                                self.options.ownerDocument.execCommand(\"indent\", e);\n                            }\n                        }\n                    } else if (e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.DELETE || e.which === Util.keyCode.ENTER) {\n                        // Bind keys which can create or destroy a block element: backspace, delete, return\n                        self.onBlockModifier(e);\n                    } else if (e.ctrlKey || e.metaKey) {\n                        key = String.fromCharCode(e.which || e.keyCode).toLowerCase();\n                        self.commands.forEach(function (extension) {\n                            if (extension.options.key && extension.options.key === key) {\n                                extension.handleClick(e);\n                            }\n                        });\n                    }\n                });\n                return this;\n            },\n\n            onBlockModifier: function (e) {\n                var range,\n                    sel,\n                    p,\n                    node = Selection.getSelectionStart(this.options.ownerDocument),\n                    tagName = node.tagName.toLowerCase(),\n                    isEmpty = /^(\\s+|<br\\/?>)?$/i,\n                    isHeader = /h\\d/i;\n\n                if ((e.which === Util.keyCode.BACKSPACE || e.which === Util.keyCode.ENTER) && node.previousElementSibling\n                // in a header\n                 && isHeader.test(tagName)\n                // at the very end of the block\n                 && Selection.getCaretOffsets(node).left === 0) {\n                    if (e.which === Util.keyCode.BACKSPACE && isEmpty.test(node.previousElementSibling.innerHTML)) {\n                        // backspacing the begining of a header into an empty previous element will\n                        // change the tagName of the current node to prevent one\n                        // instead delete previous node and cancel the event.\n                        node.previousElementSibling.parentNode.removeChild(node.previousElementSibling);\n                        e.preventDefault();\n                    } else if (e.which === Util.keyCode.ENTER) {\n                        // hitting return in the begining of a header will create empty header elements before the current one\n                        // instead, make \"<p><br></p>\" element, which are what happens if you hit return in an empty paragraph\n                        p = this.options.ownerDocument.createElement(\"p\");\n                        p.innerHTML = \"<br>\";\n                        node.previousElementSibling.parentNode.insertBefore(p, node);\n                        e.preventDefault();\n                    }\n                } else if (e.which === Util.keyCode.DELETE && node.nextElementSibling && node.previousElementSibling\n                // not in a header\n                 && !isHeader.test(tagName)\n                // in an empty tag\n                 && isEmpty.test(node.innerHTML)\n                // when the next tag *is* a header\n                 && isHeader.test(node.nextElementSibling.tagName)) {\n                    // hitting delete in an empty element preceding a header, ex:\n                    //  <p>[CURSOR]</p><h1>Header</h1>\n                    // Will cause the h1 to become a paragraph.\n                    // Instead, delete the paragraph node and move the cursor to the begining of the h1\n\n                    // remove node and move cursor to start of header\n                    range = document.createRange();\n                    sel = window.getSelection();\n\n                    range.setStart(node.nextElementSibling, 0);\n                    range.collapse(true);\n\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n\n                    node.previousElementSibling.parentNode.removeChild(node);\n\n                    e.preventDefault();\n                }\n            },\n\n            initToolbar: function () {\n                if (this.toolbar) {\n                    return this;\n                }\n                this.toolbar = this.createToolbar();\n                this.keepToolbarAlive = false;\n                this.toolbarActions = this.toolbar.querySelector(\".medium-editor-toolbar-actions\");\n                this.anchorPreview = this.createAnchorPreview();\n\n                return this;\n            },\n\n            createToolbar: function () {\n                var toolbar = this.options.ownerDocument.createElement(\"div\");\n                toolbar.id = \"medium-editor-toolbar-\" + this.id;\n                toolbar.className = \"medium-editor-toolbar\";\n\n                if (this.options.staticToolbar) {\n                    toolbar.className += \" static-toolbar\";\n                } else {\n                    toolbar.className += \" stalker-toolbar\";\n                }\n\n                toolbar.appendChild(this.toolbarButtons());\n\n                // Add any forms that extensions may have\n                this.commands.forEach(function (extension) {\n                    if (extension.hasForm) {\n                        toolbar.appendChild(extension.getForm());\n                    }\n                });\n\n                this.options.elementsContainer.appendChild(toolbar);\n                return toolbar;\n            },\n\n            //TODO: actionTemplate\n            toolbarButtons: function () {\n                var ul = this.options.ownerDocument.createElement(\"ul\"),\n                    li,\n                    btn;\n\n                ul.id = \"medium-editor-toolbar-actions\" + this.id;\n                ul.className = \"medium-editor-toolbar-actions clearfix\";\n\n                this.commands.forEach((function (extension) {\n                    if (typeof extension.getButton === \"function\") {\n                        btn = extension.getButton(this);\n                        li = this.options.ownerDocument.createElement(\"li\");\n                        if (Util.isElement(btn)) {\n                            li.appendChild(btn);\n                        } else {\n                            li.innerHTML = btn;\n                        }\n                        ul.appendChild(li);\n                    }\n                }).bind(this));\n\n                return ul;\n            },\n\n            bindSelect: function () {\n                var i,\n                    blurHelper = (function (event) {\n                    // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n                    if (event && event.type && event.type.toLowerCase() === \"blur\" && event.relatedTarget && Util.isDescendant(this.toolbar, event.relatedTarget)) {\n                        return false;\n                    }\n                    this.checkSelection();\n                }).bind(this),\n                    timeoutHelper = (function () {\n                    setTimeout((function () {\n                        this.checkSelection();\n                    }).bind(this), 0);\n                }).bind(this);\n\n                this.on(this.options.ownerDocument.documentElement, \"mouseup\", this.checkSelection.bind(this));\n\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.on(this.elements[i], \"keyup\", this.checkSelection.bind(this));\n                    this.on(this.elements[i], \"blur\", blurHelper);\n                    this.on(this.elements[i], \"click\", timeoutHelper);\n                }\n\n                return this;\n            },\n\n            bindDragDrop: function () {\n                var self = this,\n                    i,\n                    className,\n                    onDrag,\n                    onDrop,\n                    element;\n\n                if (!self.options.imageDragging) {\n                    return this;\n                }\n\n                className = \"medium-editor-dragover\";\n\n                onDrag = function (e) {\n                    e.preventDefault();\n                    e.dataTransfer.dropEffect = \"copy\";\n\n                    if (e.type === \"dragover\") {\n                        this.classList.add(className);\n                    } else {\n                        this.classList.remove(className);\n                    }\n                };\n\n                onDrop = function (e) {\n                    var files;\n                    e.preventDefault();\n                    e.stopPropagation();\n                    files = Array.prototype.slice.call(e.dataTransfer.files, 0);\n                    files.some(function (file) {\n                        if (file.type.match(\"image\")) {\n                            var fileReader, id;\n                            fileReader = new FileReader();\n                            fileReader.readAsDataURL(file);\n\n                            id = \"medium-img-\" + +new Date();\n                            Util.insertHTMLCommand(self.options.ownerDocument, \"<img class=\\\"medium-image-loading\\\" id=\\\"\" + id + \"\\\" />\");\n\n                            fileReader.onload = function () {\n                                var img = document.getElementById(id);\n                                if (img) {\n                                    img.removeAttribute(\"id\");\n                                    img.removeAttribute(\"class\");\n                                    img.src = fileReader.result;\n                                }\n                            };\n                        }\n                    });\n                    this.classList.remove(className);\n                };\n\n                for (i = 0; i < this.elements.length; i += 1) {\n                    element = this.elements[i];\n\n\n                    this.on(element, \"dragover\", onDrag);\n                    this.on(element, \"dragleave\", onDrag);\n                    this.on(element, \"drop\", onDrop);\n                }\n                return this;\n            },\n\n            stopSelectionUpdates: function () {\n                this.preventSelectionUpdates = true;\n            },\n\n            startSelectionUpdates: function () {\n                this.preventSelectionUpdates = false;\n            },\n\n            checkSelection: function () {\n                var newSelection, selectionElement;\n\n                if (!this.preventSelectionUpdates && this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n                    newSelection = this.options.contentWindow.getSelection();\n                    if (!this.options.updateOnEmptySelection && newSelection.toString().trim() === \"\" || this.options.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected() || Selection.selectionInContentEditableFalse(this.options.contentWindow)) {\n                        if (!this.options.staticToolbar) {\n                            this.hideToolbarActions();\n                        } else {\n                            this.showAndUpdateToolbar();\n                        }\n                    } else {\n                        selectionElement = Selection.getSelectionElement(this.options.contentWindow);\n                        if (!selectionElement || selectionElement.getAttribute(\"data-disable-toolbar\")) {\n                            if (!this.options.staticToolbar) {\n                                this.hideToolbarActions();\n                            }\n                        } else {\n                            this.checkSelectionElement(newSelection, selectionElement);\n                        }\n                    }\n                }\n                return this;\n            },\n\n            // Checks for existance of multiple block elements in the current selection\n            multipleBlockElementsSelected: function () {\n                /*jslint regexp: true*/\n                var selectionHtml = Selection.getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, \"\"),\n                    hasMultiParagraphs = selectionHtml.match(/<(p|h[1-6]|blockquote)[^>]*>/g);\n                /*jslint regexp: false*/\n\n                return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\n            },\n\n            checkSelectionElement: function (newSelection, selectionElement) {\n                var i,\n                    adjacentNode,\n                    offset = 0,\n                    newRange;\n                this.selection = newSelection;\n                this.selectionRange = this.selection.getRangeAt(0);\n\n                /*\n                * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\n                * will be at the very end of an element.  In other browsers, the selectionRange start\n                * would instead be at the very beginning of an element that actually has content.\n                * example:\n                *   <span>foo</span><span>bar</span>\n                *\n                * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\n                * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\n                * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\n                * properties on the 'bar' span, they won't be reflected accurately in the toolbar\n                * (ie 'Bold' button wouldn't be active)\n                *\n                * So, for cases where the selectionRange start is at the end of an element/node, find the next\n                * adjacent text node that actually has content in it, and move the selectionRange start there.\n                */\n                if (this.options.standardizeSelectionStart && this.selectionRange.startContainer.nodeValue && this.selectionRange.startOffset === this.selectionRange.startContainer.nodeValue.length) {\n                    adjacentNode = Util.findAdjacentTextNodeWithContent(Selection.getSelectionElement(this.options.contentWindow), this.selectionRange.startContainer, this.options.ownerDocument);\n                    if (adjacentNode) {\n                        offset = 0;\n                        while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\n                            offset = offset + 1;\n                        }\n                        newRange = this.options.ownerDocument.createRange();\n                        newRange.setStart(adjacentNode, offset);\n                        newRange.setEnd(this.selectionRange.endContainer, this.selectionRange.endOffset);\n                        this.selection.removeAllRanges();\n                        this.selection.addRange(newRange);\n                        this.selectionRange = newRange;\n                    }\n                }\n\n                for (i = 0; i < this.elements.length; i += 1) {\n                    if (this.elements[i] === selectionElement) {\n                        this.showAndUpdateToolbar();\n                        return;\n                    }\n                }\n\n                if (!this.options.staticToolbar) {\n                    this.hideToolbarActions();\n                }\n            },\n\n            showAndUpdateToolbar: function () {\n                this.setToolbarButtonStates().setToolbarPosition().showToolbarDefaultActions();\n            },\n\n            setToolbarPosition: function () {\n                // document.documentElement for IE 9\n                var scrollTop = this.options.ownerDocument.documentElement && this.options.ownerDocument.documentElement.scrollTop || this.options.ownerDocument.body.scrollTop,\n                    selection = this.options.contentWindow.getSelection(),\n                    windowWidth = this.options.contentWindow.innerWidth,\n                    container = Selection.getSelectionElement(this.options.contentWindow),\n                    buttonHeight = 50,\n                    toolbarWidth,\n                    toolbarHeight,\n                    halfOffsetWidth,\n                    defaultLeft,\n                    containerRect,\n                    containerTop,\n                    containerCenter,\n                    range,\n                    boundary,\n                    middleBoundary,\n                    targetLeft;\n\n                // If there isn't a valid selection, bail\n                if (!container || !this.options.contentWindow.getSelection().focusNode) {\n                    return this;\n                }\n\n                // If the container isn't part of this medium-editor instance, bail\n                if (this.elements.indexOf(container) === -1) {\n                    return this;\n                }\n\n                // Calculate container dimensions\n                containerRect = container.getBoundingClientRect();\n                containerTop = containerRect.top + scrollTop;\n                containerCenter = containerRect.left + containerRect.width / 2;\n\n                // position the toolbar at left 0, so we can get the real width of the toolbar\n                this.toolbar.style.left = \"0\";\n                toolbarWidth = this.toolbar.offsetWidth;\n                toolbarHeight = this.toolbar.offsetHeight;\n                halfOffsetWidth = toolbarWidth / 2;\n                defaultLeft = this.options.diffLeft - halfOffsetWidth;\n\n                if (this.options.staticToolbar) {\n                    this.showToolbar();\n\n                    if (this.options.stickyToolbar) {\n                        // If it's beyond the height of the editor, position it at the bottom of the editor\n                        if (scrollTop > containerTop + container.offsetHeight - toolbarHeight) {\n                            this.toolbar.style.top = containerTop + container.offsetHeight - toolbarHeight + \"px\";\n                            this.toolbar.classList.remove(\"sticky-toolbar\");\n\n                            // Stick the toolbar to the top of the window\n                        } else if (scrollTop > containerTop - toolbarHeight) {\n                            this.toolbar.classList.add(\"sticky-toolbar\");\n                            this.toolbar.style.top = \"0px\";\n\n                            // Normal static toolbar position\n                        } else {\n                            this.toolbar.classList.remove(\"sticky-toolbar\");\n                            this.toolbar.style.top = containerTop - toolbarHeight + \"px\";\n                        }\n                    } else {\n                        this.toolbar.style.top = containerTop - toolbarHeight + \"px\";\n                    }\n\n                    if (this.options.toolbarAlign === \"left\") {\n                        targetLeft = containerRect.left;\n                    } else if (this.options.toolbarAlign === \"center\") {\n                        targetLeft = containerCenter - halfOffsetWidth;\n                    } else if (this.options.toolbarAlign === \"right\") {\n                        targetLeft = containerRect.right - toolbarWidth;\n                    }\n\n                    if (targetLeft < 0) {\n                        targetLeft = 0;\n                    } else if (targetLeft + toolbarWidth > windowWidth) {\n                        targetLeft = windowWidth - toolbarWidth;\n                    }\n\n                    this.toolbar.style.left = targetLeft + \"px\";\n                } else if (!selection.isCollapsed) {\n                    this.showToolbar();\n\n                    range = selection.getRangeAt(0);\n                    boundary = range.getBoundingClientRect();\n                    middleBoundary = (boundary.left + boundary.right) / 2;\n\n                    if (boundary.top < buttonHeight) {\n                        this.toolbar.classList.add(\"medium-toolbar-arrow-over\");\n                        this.toolbar.classList.remove(\"medium-toolbar-arrow-under\");\n                        this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + \"px\";\n                    } else {\n                        this.toolbar.classList.add(\"medium-toolbar-arrow-under\");\n                        this.toolbar.classList.remove(\"medium-toolbar-arrow-over\");\n                        this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - toolbarHeight + \"px\";\n                    }\n                    if (middleBoundary < halfOffsetWidth) {\n                        this.toolbar.style.left = defaultLeft + halfOffsetWidth + \"px\";\n                    } else if (windowWidth - middleBoundary < halfOffsetWidth) {\n                        this.toolbar.style.left = windowWidth + defaultLeft - halfOffsetWidth + \"px\";\n                    } else {\n                        this.toolbar.style.left = defaultLeft + middleBoundary + \"px\";\n                    }\n                }\n\n                this.hideAnchorPreview();\n\n                return this;\n            },\n\n            setToolbarButtonStates: function () {\n                this.commands.forEach((function (extension) {\n                    if (typeof extension.isActive === \"function\") {\n                        extension.setInactive();\n                    }\n                }).bind(this));\n                this.checkActiveButtons();\n                return this;\n            },\n\n            checkActiveButtons: function () {\n                var elements = Array.prototype.slice.call(this.elements),\n                    manualStateChecks = [],\n                    queryState = null,\n                    parentNode,\n                    checkExtension = function (extension) {\n                    if (typeof extension.checkState === \"function\") {\n                        extension.checkState(parentNode);\n                    } else if (typeof extension.isActive === \"function\" && typeof extension.isAlreadyApplied === \"function\") {\n                        if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\n                            extension.setActive();\n                        }\n                    }\n                };\n\n                if (!this.selectionRange) {\n                    return;\n                }\n                parentNode = Selection.getSelectedParentElement(this.selectionRange);\n\n                // Loop through all commands\n                this.commands.forEach(function (command) {\n                    // For those commands where we can use document.queryCommandState(), do so\n                    if (typeof command.queryCommandState === \"function\") {\n                        queryState = command.queryCommandState();\n                        // If queryCommandState returns a valid value, we can trust the browser\n                        // and don't need to do our manual checks\n                        if (queryState !== null) {\n                            if (queryState) {\n                                command.setActive();\n                            }\n                            return;\n                        }\n                    }\n                    // We can't use queryCommandState for this command, so add to manualStateChecks\n                    manualStateChecks.push(command);\n                });\n\n                // Climb up the DOM and do manual checks for whether a certain command is currently enabled for this node\n                while (parentNode.tagName !== undefined && Util.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n                    manualStateChecks.forEach(checkExtension.bind(this));\n\n                    // we can abort the search upwards if we leave the contentEditable element\n                    if (elements.indexOf(parentNode) !== -1) {\n                        break;\n                    }\n                    parentNode = parentNode.parentNode;\n                }\n            },\n\n            setFirstAndLastButtons: function () {\n                var buttons = this.toolbar.querySelectorAll(\"button\");\n                if (buttons.length > 0) {\n                    buttons[0].className += \" \" + this.options.firstButtonClass;\n                    buttons[buttons.length - 1].className += \" \" + this.options.lastButtonClass;\n                }\n                return this;\n            },\n\n            // Wrapper around document.queryCommandState for checking whether an action has already\n            // been applied to the current selection\n            queryCommandState: function (action) {\n                var fullAction = /^full-(.+)$/gi,\n                    match,\n                    queryState = null;\n\n                // Actions starting with 'full-' need to be modified since this is a medium-editor concept\n                match = fullAction.exec(action);\n                if (match) {\n                    action = match[1];\n                }\n\n                try {\n                    queryState = this.options.ownerDocument.queryCommandState(action);\n                } catch (exc) {\n                    queryState = null;\n                }\n\n                return queryState;\n            },\n\n            execAction: function (action, opts) {\n                /*jslint regexp: true*/\n                var fullAction = /^full-(.+)$/gi,\n                    match,\n                    result;\n                /*jslint regexp: false*/\n\n                // Actions starting with 'full-' should be applied to to the entire contents of the editable element\n                // (ie full-bold, full-append-pre, etc.)\n                match = fullAction.exec(action);\n                if (match) {\n                    // Store the current selection to be restored after applying the action\n                    this.saveSelection();\n                    // Select all of the contents before calling the action\n                    this.selectAllContents();\n                    result = this.execActionInternal(match[1], opts);\n                    // Restore the previous selection\n                    this.restoreSelection();\n                } else {\n                    result = this.execActionInternal(action, opts);\n                }\n\n                this.checkSelection();\n                return result;\n            },\n\n            execActionInternal: function (action, opts) {\n                /*jslint regexp: true*/\n                var appendAction = /^append-(.+)$/gi,\n                    match;\n                /*jslint regexp: false*/\n\n                // Actions starting with 'append-' should attempt to format a block of text ('formatBlock') using a specific\n                // type of block element (ie append-blockquote, append-h1, append-pre, etc.)\n                match = appendAction.exec(action);\n                if (match) {\n                    return this.execFormatBlock(match[1]);\n                }\n\n                if (action === \"createLink\") {\n                    return this.createLink(opts);\n                }\n\n                if (action === \"image\") {\n                    return this.options.ownerDocument.execCommand(\"insertImage\", false, this.options.contentWindow.getSelection());\n                }\n\n                return this.options.ownerDocument.execCommand(action, false, null);\n            },\n\n            // TODO: move these two methods to selection.js\n            // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n            rangeSelectsSingleNode: function (range) {\n                var startNode = range.startContainer;\n                return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n            },\n\n            getSelectedParentElement: function () {\n                var selectedParentElement = null,\n                    range = this.selectionRange;\n                if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n                    selectedParentElement = range.startContainer.childNodes[range.startOffset];\n                } else if (range.startContainer.nodeType === 3) {\n                    selectedParentElement = range.startContainer.parentNode;\n                } else {\n                    selectedParentElement = range.startContainer;\n                }\n                return selectedParentElement;\n            },\n\n            execFormatBlock: function (el) {\n                var selectionData = Selection.getSelectionData(this.selection.anchorNode);\n                // FF handles blockquote differently on formatBlock\n                // allowing nesting, we need to use outdent\n                // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n                if (el === \"blockquote\" && selectionData.el && selectionData.el.parentNode.tagName.toLowerCase() === \"blockquote\") {\n                    return this.options.ownerDocument.execCommand(\"outdent\", false, null);\n                }\n                if (selectionData.tagName === el) {\n                    el = \"p\";\n                }\n                // When IE we need to add <> to heading elements and\n                //  blockquote needs to be called as indent\n                // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n                // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n                if (Util.isIE) {\n                    if (el === \"blockquote\") {\n                        return this.options.ownerDocument.execCommand(\"indent\", false, el);\n                    }\n                    el = \"<\" + el + \">\";\n                }\n                return this.options.ownerDocument.execCommand(\"formatBlock\", false, el);\n            },\n\n            isToolbarDefaultActionsShown: function () {\n                return !!this.toolbarActions && this.toolbarActions.style.display === \"block\";\n            },\n\n            hideToolbarDefaultActions: function () {\n                if (this.toolbarActions && this.isToolbarDefaultActionsShown()) {\n                    this.commands.forEach(function (extension) {\n                        if (extension.onHide && typeof extension.onHide === \"function\") {\n                            extension.onHide();\n                        }\n                    });\n                    this.toolbarActions.style.display = \"none\";\n                }\n            },\n\n            showToolbarDefaultActions: function () {\n                this.hideExtensionForms();\n\n                if (this.toolbarActions && !this.isToolbarDefaultActionsShown()) {\n                    this.toolbarActions.style.display = \"block\";\n                }\n\n                this.keepToolbarAlive = false;\n                // Using setTimeout + options.delay because:\n                // We will actually be displaying the toolbar, which should be controlled by options.delay\n                this.delay((function () {\n                    this.showToolbar();\n                }).bind(this));\n\n                return this;\n            },\n\n            hideExtensionForms: function () {\n                // Hide all extension forms\n                this.commands.forEach(function (extension) {\n                    if (extension.hasForm && extension.isDisplayed()) {\n                        extension.hideForm();\n                    }\n                });\n            },\n\n            isToolbarShown: function () {\n                return this.toolbar && this.toolbar.classList.contains(\"medium-editor-toolbar-active\");\n            },\n\n            showToolbar: function () {\n                if (this.toolbar && !this.isToolbarShown()) {\n                    this.toolbar.classList.add(\"medium-editor-toolbar-active\");\n                    if (typeof this.options.onShowToolbar === \"function\") {\n                        this.options.onShowToolbar();\n                    }\n                }\n            },\n\n            hideToolbar: function () {\n                if (this.isToolbarShown()) {\n                    this.toolbar.classList.remove(\"medium-editor-toolbar-active\");\n                    if (typeof this.options.onHideToolbar === \"function\") {\n                        this.options.onHideToolbar();\n                    }\n                }\n            },\n\n            hideToolbarActions: function () {\n                this.commands.forEach(function (extension) {\n                    if (extension.onHide && typeof extension.onHide === \"function\") {\n                        extension.onHide();\n                    }\n                });\n                this.keepToolbarAlive = false;\n                this.hideToolbar();\n            },\n\n            selectAllContents: function () {\n                var range = this.options.ownerDocument.createRange(),\n                    sel = this.options.contentWindow.getSelection(),\n                    currNode = Selection.getSelectionElement(this.options.contentWindow);\n\n                if (currNode) {\n                    // Move to the lowest descendant node that still selects all of the contents\n                    while (currNode.children.length === 1) {\n                        currNode = currNode.children[0];\n                    }\n\n                    range.selectNodeContents(currNode);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            },\n\n            // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n            // Tim Down\n            // TODO: move to selection.js and clean up old methods there\n            saveSelection: function () {\n                this.selectionState = null;\n\n                var selection = this.options.contentWindow.getSelection(),\n                    range,\n                    preSelectionRange,\n                    start,\n                    editableElementIndex = -1;\n\n                if (selection.rangeCount > 0) {\n                    range = selection.getRangeAt(0);\n                    preSelectionRange = range.cloneRange();\n\n                    // Find element current selection is inside\n                    this.elements.forEach(function (el, index) {\n                        if (el === range.startContainer || Util.isDescendant(el, range.startContainer)) {\n                            editableElementIndex = index;\n                            return false;\n                        }\n                    });\n\n                    if (editableElementIndex > -1) {\n                        preSelectionRange.selectNodeContents(this.elements[editableElementIndex]);\n                        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n                        start = preSelectionRange.toString().length;\n\n                        this.selectionState = {\n                            start: start,\n                            end: start + range.toString().length,\n                            editableElementIndex: editableElementIndex\n                        };\n                    }\n                }\n            },\n\n            // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n            // Tim Down\n            // TODO: move to selection.js and clean up old methods there\n            restoreSelection: function () {\n                if (!this.selectionState) {\n                    return;\n                }\n\n                var editableElement = this.elements[this.selectionState.editableElementIndex],\n                    charIndex = 0,\n                    range = this.options.ownerDocument.createRange(),\n                    nodeStack = [editableElement],\n                    node,\n                    foundStart = false,\n                    stop = false,\n                    i,\n                    sel,\n                    nextCharIndex;\n\n                range.setStart(editableElement, 0);\n                range.collapse(true);\n\n                node = nodeStack.pop();\n                while (!stop && node) {\n                    if (node.nodeType === 3) {\n                        nextCharIndex = charIndex + node.length;\n                        if (!foundStart && this.selectionState.start >= charIndex && this.selectionState.start <= nextCharIndex) {\n                            range.setStart(node, this.selectionState.start - charIndex);\n                            foundStart = true;\n                        }\n                        if (foundStart && this.selectionState.end >= charIndex && this.selectionState.end <= nextCharIndex) {\n                            range.setEnd(node, this.selectionState.end - charIndex);\n                            stop = true;\n                        }\n                        charIndex = nextCharIndex;\n                    } else {\n                        i = node.childNodes.length - 1;\n                        while (i >= 0) {\n                            nodeStack.push(node.childNodes[i]);\n                            i -= 1;\n                        }\n                    }\n                    if (!stop) {\n                        node = nodeStack.pop();\n                    }\n                }\n\n                sel = this.options.contentWindow.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            },\n\n            hideAnchorPreview: function () {\n                this.anchorPreview.classList.remove(\"medium-editor-anchor-preview-active\");\n            },\n\n            // TODO: break method\n            showAnchorPreview: function (anchorEl) {\n                if (this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\") || anchorEl.getAttribute(\"data-disable-preview\")) {\n                    return true;\n                }\n\n                var self = this,\n                    buttonHeight = 40,\n                    boundary = anchorEl.getBoundingClientRect(),\n                    middleBoundary = (boundary.left + boundary.right) / 2,\n                    halfOffsetWidth,\n                    defaultLeft;\n\n                self.anchorPreview.querySelector(\"i\").textContent = anchorEl.attributes.href.value;\n                halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n                defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\n                self.observeAnchorPreview(anchorEl);\n\n                self.anchorPreview.classList.add(\"medium-toolbar-arrow-over\");\n                self.anchorPreview.classList.remove(\"medium-toolbar-arrow-under\");\n                self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + \"px\";\n                if (middleBoundary < halfOffsetWidth) {\n                    self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + \"px\";\n                } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n                    self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n                } else {\n                    self.anchorPreview.style.left = defaultLeft + middleBoundary + \"px\";\n                }\n\n                if (this.anchorPreview && !this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\")) {\n                    this.anchorPreview.classList.add(\"medium-editor-anchor-preview-active\");\n                }\n\n                return this;\n            },\n\n            // TODO: break method\n            observeAnchorPreview: function (anchorEl) {\n                var self = this,\n                    lastOver = new Date().getTime(),\n                    over = true,\n                    stamp = function () {\n                    lastOver = new Date().getTime();\n                    over = true;\n                },\n                    unstamp = function (e) {\n                    if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n                        over = false;\n                    }\n                },\n                    interval_timer = setInterval(function () {\n                    if (over) {\n                        return true;\n                    }\n                    var durr = new Date().getTime() - lastOver;\n                    if (durr > self.options.anchorPreviewHideDelay) {\n                        // hide the preview 1/2 second after mouse leaves the link\n                        self.hideAnchorPreview();\n\n                        // cleanup\n                        clearInterval(interval_timer);\n                        self.off(self.anchorPreview, \"mouseover\", stamp);\n                        self.off(self.anchorPreview, \"mouseout\", unstamp);\n                        self.off(anchorEl, \"mouseover\", stamp);\n                        self.off(anchorEl, \"mouseout\", unstamp);\n                    }\n                }, 200);\n\n                this.on(self.anchorPreview, \"mouseover\", stamp);\n                this.on(self.anchorPreview, \"mouseout\", unstamp);\n                this.on(anchorEl, \"mouseover\", stamp);\n                this.on(anchorEl, \"mouseout\", unstamp);\n            },\n\n            createAnchorPreview: function () {\n                var self = this,\n                    anchorPreview = this.options.ownerDocument.createElement(\"div\");\n\n                anchorPreview.id = \"medium-editor-anchor-preview-\" + this.id;\n                anchorPreview.className = \"medium-editor-anchor-preview\";\n                anchorPreview.innerHTML = this.anchorPreviewTemplate();\n                this.options.elementsContainer.appendChild(anchorPreview);\n\n                this.on(anchorPreview, \"click\", function () {\n                    self.anchorPreviewClickHandler();\n                });\n\n                return anchorPreview;\n            },\n\n            anchorPreviewTemplate: function () {\n                return \"<div class=\\\"medium-editor-toolbar-anchor-preview\\\" id=\\\"medium-editor-toolbar-anchor-preview\\\">\" + \"    <i class=\\\"medium-editor-toolbar-anchor-preview-inner\\\"></i>\" + \"</div>\";\n            },\n\n            anchorPreviewClickHandler: function (event) {\n                var range,\n                    sel,\n                    anchorExtension = this.getExtensionByName(\"anchor\");\n\n                if (anchorExtension && this.activeAnchor) {\n                    range = this.options.ownerDocument.createRange();\n                    range.selectNodeContents(this.activeAnchor);\n\n                    sel = this.options.contentWindow.getSelection();\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                    // Using setTimeout + options.delay because:\n                    // We may actually be displaying the anchor form, which should be controlled by options.delay\n                    this.delay((function () {\n                        if (this.activeAnchor) {\n                            anchorExtension.showForm(this.activeAnchor.attributes.href.value);\n                        }\n                        this.keepToolbarAlive = false;\n                    }).bind(this));\n                }\n\n                this.hideAnchorPreview();\n            },\n\n            editorAnchorObserver: function (e) {\n                var self = this,\n                    overAnchor = true,\n                    leaveAnchor = function () {\n                    // mark the anchor as no longer hovered, and stop listening\n                    overAnchor = false;\n                    self.off(self.activeAnchor, \"mouseout\", leaveAnchor);\n                };\n\n                if (e.target && e.target.tagName.toLowerCase() === \"a\") {\n                    // Detect empty href attributes\n                    // The browser will make href=\"\" or href=\"#top\"\n                    // into absolute urls when accessed as e.targed.href, so check the html\n                    if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n                        return true;\n                    }\n\n                    // only show when hovering on anchors\n                    if (this.isToolbarShown()) {\n                        // only show when toolbar is not present\n                        return true;\n                    }\n                    this.activeAnchor = e.target;\n                    this.on(this.activeAnchor, \"mouseout\", leaveAnchor);\n                    // Using setTimeout + options.delay because:\n                    // - We're going to show the anchor preview according to the configured delay\n                    //   if the mouse has not left the anchor tag in that time\n                    this.delay(function () {\n                        if (overAnchor) {\n                            self.showAnchorPreview(e.target);\n                        }\n                    });\n                }\n            },\n\n            bindAnchorPreview: function (index) {\n                var i,\n                    self = this;\n                this.editorAnchorObserverWrapper = function (e) {\n                    self.editorAnchorObserver(e);\n                };\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.on(this.elements[i], \"mouseover\", this.editorAnchorObserverWrapper);\n                }\n                return this;\n            },\n\n            createLink: function (opts) {\n                var customEvent, i;\n\n                if (opts.url && opts.url.trim().length > 0) {\n                    this.options.ownerDocument.execCommand(\"createLink\", false, opts.url);\n\n                    if (this.options.targetBlank || opts.target === \"_blank\") {\n                        Util.setTargetBlank(Selection.getSelectionStart(this.options.ownerDocument));\n                    }\n\n                    if (opts.buttonClass) {\n                        this.setButtonClass(opts.buttonClass);\n                    }\n                }\n\n                if (this.options.targetBlank || opts.target === \"_blank\" || opts.buttonClass) {\n                    customEvent = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n                    customEvent.initEvent(\"input\", true, true, this.options.contentWindow);\n                    for (i = 0; i < this.elements.length; i += 1) {\n                        this.elements[i].dispatchEvent(customEvent);\n                    }\n                }\n            },\n\n            setButtonClass: function (buttonClass) {\n                var el = Selection.getSelectionStart(this.options.ownerDocument),\n                    classes = buttonClass.split(\" \"),\n                    i,\n                    j;\n                if (el.tagName.toLowerCase() === \"a\") {\n                    for (j = 0; j < classes.length; j += 1) {\n                        el.classList.add(classes[j]);\n                    }\n                } else {\n                    el = el.getElementsByTagName(\"a\");\n                    for (i = 0; i < el.length; i += 1) {\n                        for (j = 0; j < classes.length; j += 1) {\n                            el[i].classList.add(classes[j]);\n                        }\n                    }\n                }\n            },\n\n            positionToolbarIfShown: function () {\n                if (this.isToolbarShown()) {\n                    this.setToolbarPosition();\n                }\n            },\n\n            bindWindowActions: function () {\n                var self = this;\n\n                // Add a scroll event for sticky toolbar\n                if (this.options.staticToolbar && this.options.stickyToolbar) {\n                    // On scroll, re-position the toolbar\n                    this.on(this.options.contentWindow, \"scroll\", function () {\n                        self.positionToolbarIfShown();\n                    }, true);\n                }\n\n                this.on(this.options.contentWindow, \"resize\", function () {\n                    self.handleResize();\n                });\n\n                this.bindBlur();\n\n                return this;\n            },\n\n            activate: function () {\n                if (this.isActive) {\n                    return;\n                }\n\n                this.setup();\n            },\n\n            // TODO: break method\n            deactivate: function () {\n                var i;\n                if (!this.isActive) {\n                    return;\n                }\n                this.isActive = false;\n\n                if (this.toolbar !== undefined) {\n                    this.options.elementsContainer.removeChild(this.anchorPreview);\n                    this.options.elementsContainer.removeChild(this.toolbar);\n                    delete this.toolbar;\n                    delete this.anchorPreview;\n                }\n\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.elements[i].removeAttribute(\"contentEditable\");\n                    this.elements[i].removeAttribute(\"data-medium-element\");\n                }\n\n                this.commands.forEach((function (extension) {\n                    if (typeof extension.deactivate === \"function\") {\n                        extension.deactivate();\n                    }\n                }).bind(this));\n\n                this.removeAllEvents();\n            },\n\n            bindPaste: function () {\n                var i,\n                    self = this;\n                this.pasteWrapper = function (e) {\n                    pasteHandler.handlePaste(this, e, self.options);\n                };\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.on(this.elements[i], \"paste\", this.pasteWrapper);\n                }\n                return this;\n            },\n\n            setPlaceholders: function () {\n                if (!this.options.disablePlaceholders && this.elements && this.elements.length) {\n                    this.elements.forEach((function (el) {\n                        this.activatePlaceholder(el);\n                        this.on(el, \"blur\", this.placeholderWrapper.bind(this));\n                        this.on(el, \"keypress\", this.placeholderWrapper.bind(this));\n                    }).bind(this));\n                }\n\n                return this;\n            },\n\n            cleanPaste: function (text) {\n                pasteHandler.cleanPaste(text, this.options);\n            },\n\n            pasteHTML: function (html) {\n                pasteHandler.pasteHTML(html, this.options.ownerDocument);\n            }\n        };\n    })();\n\n    return MediumEditor;\n})());\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/vendor/medium-editor.js\n ** module id = 34\n ** module chunks = 3\n **/"],"sourceRoot":""}